<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>affectalways</title>
        <link>https://affectalways.github.io/</link>
        <description>affectalways.</description>
        <generator>Hugo 0.74.3 https://gohugo.io/</generator>
        
            <language>en</language>
        
        
            <managingEditor>affectalways@gmail.com (affectalways)</managingEditor>
        
        
            <webMaster>affectalways@gmail.com (affectalways)</webMaster>
        
        
            <copyright>@2020 affectalways</copyright>
        
        <lastBuildDate>Sun, 09 Aug 2020 23:38:57 &#43;0800</lastBuildDate>
        
            <atom:link rel="self" type="application/rss&#43;xml" href="https://affectalways.github.io/rss.xml" />
        
        
            <item>
                <title>Werkzeug 源码解析(4)</title>
                <link>https://affectalways.github.io/posts/werkzeug/werkzeug_sc_4/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/werkzeug/werkzeug_sc_4/</guid>
                <pubDate>Wed, 05 Aug 2020 22:46:55 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h3 id=&#34;wsgipy开讲&#34;&gt;wsgi.py开讲&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;wsgi.py&lt;/code&gt;封装了一系列方法，现在讲几个自认为是常用的方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;get_current_url方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）作用：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;获取当前请求的URL
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（2）使用案例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	&amp;gt;&amp;gt;&amp;gt; from werkzeug.test import create_environ
    &amp;gt;&amp;gt;&amp;gt; env = create_environ(&amp;quot;/?param=foo&amp;quot;, &amp;quot;http://localhost/script&amp;quot;)
    &amp;gt;&amp;gt;&amp;gt; get_current_url(env)
    &#39;http://localhost/script/?param=foo&#39;
    
    &amp;gt;&amp;gt;&amp;gt; get_current_url(env, root_only=True)
    &#39;http://localhost/script/&#39;
    
    &amp;gt;&amp;gt;&amp;gt; get_current_url(env, host_only=True)
    &#39;http://localhost/&#39;
    
    &amp;gt;&amp;gt;&amp;gt; get_current_url(env, strip_querystring=True)
    &#39;http://localhost/script/&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（3）代码（&lt;strong&gt;感觉没有什么内容可说&lt;/strong&gt;）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_current_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;root_only&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;strip_querystring&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;host_only&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;trusted_hosts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    
    &lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;wsgi.url_scheme&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;://&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;trusted_hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# tmp.append， tmp是list类型，list.append方法，cat指向tmp.append&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;host_only&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uri_to_iri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{&amp;#39;&amp;#39;.join(tmp)}/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        
    &lt;span class=&#34;n&#34;&gt;cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url_quote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SCRIPT_NAME&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;latin1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rstrip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root_only&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url_quote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;PATH_INFO&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;latin1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lstrip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strip_querystring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;qs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_query_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;qs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;?{qs}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# uri_to_iri是把URI地址转换成IRI格式（IRI包含Unicode字符，URI是ASCII字符编码）&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uri_to_iri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;host_is_trusted方法&lt;/strong&gt;
（1）作用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;检查主机是否可行
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（2）使用案例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wsgi.py get_host方法159行有用到
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（3）代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;host_is_trusted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;trusted_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;# str -&amp;gt; list&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;isinstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trusted_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;trusted_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trusted_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_normalize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    	&lt;span class=&#34;c1&#34;&gt;# 把port去除，只获取host&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;hostname&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rsplit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_encode_idna&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;hostname&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_normalize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;UnicodeError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
        
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;trusted_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;startswith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;suffix_match&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;suffix_match&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
            
        &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_normalize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;UnicodeError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
            
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
            
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;suffix_match&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endswith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;get_host方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）作用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;返回运行环境主机
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（2）使用案例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pass
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（3）代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;trusted_hosts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HTTP_HOST&amp;#34;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# HTTP_HOST 在environ&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;rv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HTTP_HOST&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;wsgi.url_scheme&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endswith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;:80&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;# 获取除:80端口的主机号&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;rv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;wsgi.url_scheme&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https&amp;#34;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endswith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;:443&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;# 获取除:443端口的主机号&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;rv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;rv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SERVER_NAME&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;wsgi.url_scheme&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SERVER_PORT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;80&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;# 获取主机+端口&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;rv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;:{environ[&amp;#39;SERVER_PORT&amp;#39;]}&amp;#34;&lt;/span&gt;
    
    &lt;span class=&#34;c1&#34;&gt;# 判断是否可信&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;trusted_hosts&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# 用到了host_is_trusted方法了&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;host_is_trusted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;trusted_hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;.exceptions&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SecurityError&lt;/span&gt;

            &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SecurityError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Host &amp;#34;{rv}&amp;#34; is not trusted&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;get_content_length方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）作用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;获取来自WSGI环境的内容长度
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（2）使用案例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pass
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（3）代码，&lt;strong&gt;实在没什么好讲的&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_content_length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
   	&lt;span class=&#34;c1&#34;&gt;# 块读取，直接返回None&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HTTP_TRANSFER_ENCODING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;chunked&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;content_length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;CONTENT_LENGTH&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;content_length&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;content_length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ne&#34;&gt;ValueError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;TypeError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;get_query_string方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）作用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;获取对应的URL字段
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（2）使用案例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pass
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（3）代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_query_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 获取environ中的QUERY_STRING对应的值，并以latin1格式进行编码&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;qs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;QUERY_STRING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;latin1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# QUERY_STRING really should be ascii safe but some browsers&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# will send us some unicode stuff (I am looking at you IE).&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# In that case we want to urllib quote it badly.&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;url_quote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;qs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;safe&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;:&amp;amp;%=+$!*&amp;#39;(),&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/python/">python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/werkzeug/">werkzeug</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/flask/">flask</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/python/">python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/werkzeug/">werkzeug</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>643子数组最大平均数</title>
                <link>https://affectalways.github.io/posts/leetcode/%E6%95%B0%E7%BB%84/643%E5%AD%90%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%B9%B3%E5%9D%87%E6%95%B0/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/leetcode/%E6%95%B0%E7%BB%84/643%E5%AD%90%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%B9%B3%E5%9D%87%E6%95%B0/</guid>
                <pubDate>Wed, 05 Aug 2020 22:04:50 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h4 id=&#34;643-子数组最大平均数-ihttpsleetcode-cncomproblemsmaximum-average-subarray-i&#34;&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/maximum-average-subarray-i/&#34;&gt;643. 子数组最大平均数 I&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;给定 n 个整数，找出平均数最大且长度为 k 的连续子数组，并输出该最大平均数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: [1,12,-5,-6,50,3], k = 4
输出: 12.75
解释: 最大平均数 (12-5-6+50)/4 = 51/4 = 12.75
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 &amp;lt;= k &amp;lt;= n &amp;lt;= 30,000。
所给数据范围 [-10,000，10,000]。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;滑动窗口
1、维护一个长度为k的窗口，和窗口当前的和sum
2、遍历nums，每碰到一个新元素时，都要相应的从sum中减去退出窗口的值，加上新加入窗口的值
3、看看当然的sum是不是比以往的都大，是的话，记录到max里面去
4、最后返回max/k就好了
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func findMaxAverage(nums []int, k int) float64 {
	var sum, max int
	for i := 0; i &amp;lt; k; i++ {
		sum += nums[i]
	}
	max = sum
	for i := k; i &amp;lt; len(nums); i++ {
		sum += nums[i] - nums[i-k]
		if sum &amp;gt; max {
			max = sum
		}
	}
	return float64(max) / float64(k)
}

func main() {
	nums := []int{1, 12, -5, -6, 50, 3}
	k := 4
	result := findMaxAverage(nums, k)
	fmt.Print(result)
}

&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/%E6%95%B0%E7%BB%84/">数组</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/leetcode/">leetcode</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>1346检查整数及其两倍数是否存在</title>
                <link>https://affectalways.github.io/posts/leetcode/%E6%95%B0%E7%BB%84/1346%E6%A3%80%E6%9F%A5%E6%95%B4%E6%95%B0%E5%8F%8A%E5%85%B6%E4%B8%A4%E5%80%8D%E6%95%B0%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/leetcode/%E6%95%B0%E7%BB%84/1346%E6%A3%80%E6%9F%A5%E6%95%B4%E6%95%B0%E5%8F%8A%E5%85%B6%E4%B8%A4%E5%80%8D%E6%95%B0%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8/</guid>
                <pubDate>Mon, 03 Aug 2020 23:28:47 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h4 id=&#34;1346-检查整数及其两倍数是否存在httpsleetcode-cncomproblemscheck-if-n-and-its-double-exist&#34;&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/check-if-n-and-its-double-exist/&#34;&gt;1346. 检查整数及其两倍数是否存在&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;给你一个整数数组 arr，请你检查是否存在两个整数 N 和 M，满足 N 是 M 的两倍（即，N = 2 * M）。&lt;/p&gt;
&lt;p&gt;更正式地，检查是否存在两个下标 i 和 j 满足：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;i != j
0 &amp;lt;= i, j &amp;lt; arr.length
arr[i] == 2 * arr[j]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：arr = [10,2,5,3]
输出：true
解释：N = 10 是 M = 5 的两倍，即 10 = 2 * 5 。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：arr = [7,1,14,11]
输出：true
解释：N = 14 是 M = 7 的两倍，即 14 = 2 * 7 。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：arr = [3,1,7,11]
输出：false
解释：在该情况下不存在 N 和 M 满足 N = 2 * M 。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2 &amp;lt;= arr.length &amp;lt;= 500
-10^3 &amp;lt;= arr[i] &amp;lt;= 10^3
&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/%E6%95%B0%E7%BB%84/">数组</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>605种花问题</title>
                <link>https://affectalways.github.io/posts/leetcode/%E6%95%B0%E7%BB%84/605%E7%A7%8D%E8%8A%B1%E9%97%AE%E9%A2%98/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/leetcode/%E6%95%B0%E7%BB%84/605%E7%A7%8D%E8%8A%B1%E9%97%AE%E9%A2%98/</guid>
                <pubDate>Mon, 03 Aug 2020 23:23:52 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h4 id=&#34;605-种花问题httpsleetcode-cncomproblemscan-place-flowers&#34;&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/can-place-flowers/&#34;&gt;605. 种花问题&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;假设你有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花卉不能种植在相邻的地块上，它们会争夺水源，两者都会死去。&lt;/p&gt;
&lt;p&gt;给定一个花坛（表示为一个数组包含0和1，其中0表示没种植花，1表示种植了花），和一个数 n 。能否在不打破种植规则的情况下种入 n 朵花？能则返回True，不能则返回False。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: flowerbed = [1,0,0,0,1], n = 1
输出: True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: flowerbed = [1,0,0,0,1], n = 2
输出: False
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;数组内已种好的花不会违反种植规则。
输入的数组长度范围为 [1, 20000]。
n 是非负整数，且不会超过输入数组的大小。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;遍历数组：
（1）对第一个元素，本身是0右边是0即可种花
（2）对于中间元素，本身是0，左右两边都是0，可以种花
（3）对于最后一个元素，本身是0，左边是0，可以种花
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func canPlaceFlowers(flowerbed []int, n int) bool {
	length := len(flowerbed)
	var count int
	for i, value := range flowerbed {
		if value == 0 &amp;amp;&amp;amp; (i == 0 || flowerbed[i-1] == 0) &amp;amp;&amp;amp; (i == length-1 || flowerbed[i+1] == 0) {
			flowerbed[i] = 1
			count += 1
		}
	}
	return count &amp;gt;= n
}

func main() {
	flowerbed := []int{1, 0, 0, 0, 1}
	n := 1
	result := canPlaceFlowers(flowerbed, n)
	fmt.Print(result)
}

&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/%E6%95%B0%E7%BB%84/">数组</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>167两数之和2</title>
                <link>https://affectalways.github.io/posts/leetcode/%E6%95%B0%E7%BB%84/167%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C2/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/leetcode/%E6%95%B0%E7%BB%84/167%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C2/</guid>
                <pubDate>Mon, 03 Aug 2020 23:06:59 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h4 id=&#34;167-两数之和-ii---输入有序数组httpsleetcode-cncomproblemstwo-sum-ii-input-array-is-sorted&#34;&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/&#34;&gt;167. 两数之和 II - 输入有序数组&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。&lt;/p&gt;
&lt;p&gt;函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;返回的下标值（index1 和 index2）不是从零开始的。
你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: numbers = [2, 7, 11, 15], target = 9
输出: [1,2]
解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;双指针

初始时两个指针分别指向第一个元素位置和最后一个元素的位置。每次计算两个指针指向的两个元素之和，并和目标值比较。如果两个元素之和等于目标值，则发现了唯一解。如果两个元素之和小于目标值，则将左侧指针右移一位。如果两个元素之和大于目标值，则将右侧指针左移一位。移动指针之后，重复上述操作，直到找到答案。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func twoSum(numbers []int, target int) []int {
	length := len(numbers)
	var right int = length - 1
	var left int = 0
	for left &amp;lt; right {
		sum := numbers[left] + numbers[right]
		if sum == target {
			break
		} else if sum &amp;lt; target {
			left += 1
		} else {
			right -= 1
		}
	}
	return []int{left + 1, right + 1}
}

func main() {
	numbers := []int{2, 7, 11, 15}
	target := 9
	result := twoSum(numbers, target)
	fmt.Print(result)

}

&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/%E6%95%B0%E7%BB%84/">数组</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>118杨辉三角</title>
                <link>https://affectalways.github.io/posts/leetcode/%E6%95%B0%E7%BB%84/118%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/leetcode/%E6%95%B0%E7%BB%84/118%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/</guid>
                <pubDate>Wed, 29 Jul 2020 22:53:20 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h4 id=&#34;118-杨辉三角httpsleetcode-cncomproblemspascals-triangle&#34;&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/pascals-triangle/&#34;&gt;118. 杨辉三角&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;给定一个非负整数 *numRows，*生成杨辉三角的前 &lt;em&gt;numRows&lt;/em&gt; 行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在杨辉三角中，每个数是它左上方和右上方的数的和。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: 5
输出:
[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.杨辉三角每层的i的值都是上层决定的m[i]+m[i+1]的和
2 第一个元素需要特殊处理一下，我们可以在每层头部增加一个数字是0的元素
&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/%E6%95%B0%E7%BB%84/">数组</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>1160拼写单词</title>
                <link>https://affectalways.github.io/posts/leetcode/%E6%95%B0%E7%BB%84/1160%E6%8B%BC%E5%86%99%E5%8D%95%E8%AF%8D/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/leetcode/%E6%95%B0%E7%BB%84/1160%E6%8B%BC%E5%86%99%E5%8D%95%E8%AF%8D/</guid>
                <pubDate>Tue, 28 Jul 2020 23:42:32 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h4 id=&#34;1160-拼写单词httpsleetcode-cncomproblemsfind-words-that-can-be-formed-by-characters&#34;&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/find-words-that-can-be-formed-by-characters/&#34;&gt;1160. 拼写单词&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;给你一份『词汇表』（字符串数组） words 和一张『字母表』（字符串） chars。&lt;/p&gt;
&lt;p&gt;假如你可以用 chars 中的『字母』（字符）拼写出 words 中的某个『单词』（字符串），那么我们就认为你掌握了这个单词。&lt;/p&gt;
&lt;p&gt;注意：每次拼写（指拼写词汇表中的一个单词）时，chars 中的每个字母都只能用一次。&lt;/p&gt;
&lt;p&gt;返回词汇表 words 中你掌握的所有单词的 长度之和。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：words = [&amp;quot;cat&amp;quot;,&amp;quot;bt&amp;quot;,&amp;quot;hat&amp;quot;,&amp;quot;tree&amp;quot;], chars = &amp;quot;atach&amp;quot;
输出：6
解释： 
可以形成字符串 &amp;quot;cat&amp;quot; 和 &amp;quot;hat&amp;quot;，所以答案是 3 + 3 = 6。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：words = [&amp;quot;hello&amp;quot;,&amp;quot;world&amp;quot;,&amp;quot;leetcode&amp;quot;], chars = &amp;quot;welldonehoneyr&amp;quot;
输出：10
解释：
可以形成字符串 &amp;quot;hello&amp;quot; 和 &amp;quot;world&amp;quot;，所以答案是 5 + 5 = 10。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 &amp;lt;= words.length &amp;lt;= 1000
1 &amp;lt;= words[i].length, chars.length &amp;lt;= 100
所有字符串中都仅包含小写英文字母
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;对于一个单词 word，只要其中的每个字母的数量都不大于 chars 中对应的字母的数量，那么就可以用 chars 中的字母拼写出 word。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func countCharacters(words []string, chars string) int {
	count := 0
	for _, word := range words {
		flag := true
		for _, value := range word {
			if flag &amp;amp;&amp;amp; strings.Count(word, string(value)) &amp;gt; strings.Count(chars, string(value)) {
				flag = false
			}
		}
		if flag {
			count += len(word)
		}
	}

	return count
}
&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/%E6%95%B0%E7%BB%84/">数组</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>674最长连续递增序列</title>
                <link>https://affectalways.github.io/posts/leetcode/%E6%95%B0%E7%BB%84/674%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E9%80%92%E5%A2%9E%E5%BA%8F%E5%88%97/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/leetcode/%E6%95%B0%E7%BB%84/674%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E9%80%92%E5%A2%9E%E5%BA%8F%E5%88%97/</guid>
                <pubDate>Tue, 28 Jul 2020 23:31:15 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h4 id=&#34;674-最长连续递增序列httpsleetcode-cncomproblemslongest-continuous-increasing-subsequence&#34;&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/longest-continuous-increasing-subsequence/&#34;&gt;674. 最长连续递增序列&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;给定一个未经排序的整数数组，找到最长且连续的的递增序列，并返回该序列的长度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: [1,3,5,4,7]
输出: 3
解释: 最长连续递增序列是 [1,3,5], 长度为3。
尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为5和7在原数组里被4隔开。 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: [2,2,2,2,2]
输出: 1
解释: 最长连续递增序列是 [2], 长度为1。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：数组长度不会超过10000。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;滑动窗口...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func findLengthOfLCIS(nums []int) int {
	length := len(nums)
	if length &amp;lt;= 1 {
		return length
	}
	var count int = 1
	var max_length int = 1
	for index, value := range nums {
		if index == 0 {
			continue
		}
		if value &amp;gt; nums[index-1] {
			count += 1
		} else {
			index += 1
			count = 1
		}
		if max_length &amp;lt; count {
			max_length = count
		}
	}
	return max_length
}
&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/%E6%95%B0%E7%BB%84/">数组</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>Offer53 0~n-1中缺失的数字</title>
                <link>https://affectalways.github.io/posts/leetcode/%E6%95%B0%E7%BB%84/offer530~n-1%E4%B8%AD%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/leetcode/%E6%95%B0%E7%BB%84/offer530~n-1%E4%B8%AD%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
                <pubDate>Tue, 28 Jul 2020 22:48:06 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h4 id=&#34;剑指-offer-53---ii-0n-1中缺失的数字httpsleetcode-cncomproblemsque-shi-de-shu-zi-lcof&#34;&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof/&#34;&gt;剑指 Offer 53 - II. 0～n-1中缺失的数字&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: [0,1,3]
输出: 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: [0,1,2,3,4,5,6,7,9]
输出: 8
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;限制：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 &amp;lt;= 数组长度 &amp;lt;= 10000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;解题思路&lt;/strong&gt;
&lt;strong&gt;思路一：依次遍历&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(1) 从头开始依次遍历数组每一位元素。
(2) 找到第一位值不等于索引的元素，则缺失值为当前索引。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func missingNumber(nums []int) int {
	for index, value := range nums {
		if index == 0 {
			continue
		}
		if (value - nums[index-1]) &amp;gt; 1 {
			return value - 1
		}

	}
	return 0
}

func main() {
	nums := []int{0, 1, 3}
	number := missingNumber(nums)
	fmt.Println(number)
}

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;思路二：二分查找&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(1) 根据二分查找找到第一个元素值不等于索引的索引就是缺失值。
(2) 元素值都和索引相等则缺失值等于数组长度。
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;class Solution {
    public int missingNumber(int[] nums) {
        // 定义左右指针分别指向数组元素值的边界。
        int left = 0, right = nums.length;
        while (left &amp;lt; right) {
            // 找到中间值。
            int mid = left + (right - left) / 2;
            if (nums[mid] &amp;gt; mid) {
                // 数组索引值与索引不对应，则缺失值在左侧。
                right = mid;
            } else {
                // 数组索引值等于索引，则缺失值在右侧。
                left = mid + 1;
            }
        }
        return right;
    }
}

&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/%E6%95%B0%E7%BB%84/">数组</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>桶排序</title>
                <link>https://affectalways.github.io/posts/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E6%A1%B6%E6%8E%92%E5%BA%8F/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E6%A1%B6%E6%8E%92%E5%BA%8F/</guid>
                <pubDate>Sun, 26 Jul 2020 21:10:37 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;p&gt;&lt;strong&gt;介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;桶排序（Bucket sort）&lt;/strong&gt;，是一个&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95&#34;&gt;排序算法&lt;/a&gt;，工作的原理是将&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%99%A3%E5%88%97&#34;&gt;数组&lt;/a&gt;分到&lt;code&gt;有限数量&lt;/code&gt;的桶里。每个桶再个别排序（有可能再使用别的&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95&#34;&gt;排序算法&lt;/a&gt;或是以递归方式继续使用桶排序进行排序）。&lt;/p&gt;
&lt;p&gt;桶排序并不是&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%AF%94%E8%BE%83%E6%8E%92%E5%BA%8F&#34;&gt;比较排序&lt;/a&gt;，他不受到&lt;img src=&#34;https://wikimedia.org/api/rest_v1/media/math/render/svg/9d2320768fb54880ca4356e61f60eb02a3f9d9f1&#34; alt=&#34;{\displaystyle O(n\log n)}&#34;&gt;下限的影响。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;桶排序以下列程序进行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.设置一个定量的数组当作空桶子。
2.寻访序列，并且把项目一个一个放到对应的桶子去。
3.对每个不是空的桶子进行排序。
4.从不是空的桶子里把项目再放回原来的序列中。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设有些整数，范围在1-100之间。现在有n=10的序列要进行排序&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Original array

+-------------------------------------------------+
|  6 | 28 | 96 | 14 | 74 | 37 |  9 | 71 | 91 | 36 |
+-------------------------------------------------+

&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create&lt;/strong&gt;：创建一定数量的空桶，这里我们建立与原始数组长度相等的空桶（10个）。每个空桶对应区间为0~9、10~19、20~29、30~39、40~49、50~59、60~69、70~79、80~89、90-99的区间&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Bucket array
   
+-------------------------------------------------+
|    |    |    |    |    |    |    |    |    |    |
+-------------------------------------------------+
  ^    ^
  |    |
  |    |
  |    holds values in range 11 to 20
  holds values in range 1 to 10
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Scout&lt;/strong&gt;：将原始序列中的元素，放入到对应的桶里&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Bucket array
   
  6,9  14   28   37,36               74,71     96,91
  |    |    |    |                   |         |
+-v----v----v----v-------------------v---------v--+
|    |    |    |    |    |    |    |    |    |    |
+-------------------------------------------------+
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Sort&lt;/strong&gt;：排序所有&lt;code&gt;非空&lt;/code&gt;桶中的元素，桶内排序可以采用任意排序算法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Bucket array
   
  sort sort sort sort                sort      sort
  ---  --   --   -----               -----     -----
  6,9  14   28   36,37               71,74     91,96
  |    |    |    |                   |         |
+-v----v----v----v-------------------v---------v--+
|    |    |    |    |    |    |    |    |    |    |
+-------------------------------------------------+
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Gather&lt;/strong&gt;：排序完成后，再把所有桶中元素依序放回原始序列&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Original array
+-------------------------------------------------+
|  6 |  9 | 14 | 28 | 36 | 37 | 71 | 74 | 91 | 96 |
+-------------------------------------------------+
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/%E7%AE%97%E6%B3%95/">算法</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/%E6%A1%B6%E6%8E%92%E5%BA%8F/">桶排序</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/%E7%AE%97%E6%B3%95/">算法</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Goland 2020版破解</title>
                <link>https://affectalways.github.io/posts/golang/goland2020%E7%89%88%E7%A0%B4%E8%A7%A3/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/golang/goland2020%E7%89%88%E7%A0%B4%E8%A7%A3/</guid>
                <pubDate>Sat, 25 Jul 2020 21:26:36 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;p&gt;&lt;strong&gt;GoLand 2020版破解教程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本教程适用于GoLand 2020 1.4版本，其他版本理论上是一致的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GoLand下载地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/go/download/#section=windows&#34;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;激活步骤&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载GoLand&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载破解补丁文件，&lt;a href=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/repository/jetbrains-agent-latest.zip&#34;&gt;jetbrains-agent-latest.zip破解补丁下载地址&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装GoLand，正常安装即可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进入&lt;code&gt;激活界面&lt;/code&gt;，选择&lt;code&gt;免费试用（Evaluate for free）&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用GoLand随便打开一个已存在的项目（或者创建一个）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拖入&lt;code&gt;zip文件&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/go/goland01.png?raw=true&#34; alt=&#34;破解补丁&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按箭头操作即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/go/goland02.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/go/goland03.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/go/goland04.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;查看是否激活成功&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;点击Help --&amp;gt; About
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/go/goland05.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/golang/">golang</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/go/">go</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>1051高度检查器</title>
                <link>https://affectalways.github.io/posts/leetcode/%E6%95%B0%E7%BB%84/1051%E9%AB%98%E5%BA%A6%E6%A3%80%E6%9F%A5%E5%99%A8/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/leetcode/%E6%95%B0%E7%BB%84/1051%E9%AB%98%E5%BA%A6%E6%A3%80%E6%9F%A5%E5%99%A8/</guid>
                <pubDate>Fri, 24 Jul 2020 23:12:17 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h4 id=&#34;1051-高度检查器httpsleetcode-cncomproblemsheight-checker&#34;&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/height-checker/&#34;&gt;1051. 高度检查器&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;学校在拍年度纪念照时，一般要求学生按照 非递减 的高度顺序排列。&lt;/p&gt;
&lt;p&gt;请你返回能让所有学生以 非递减 高度排列的最小必要移动人数。&lt;/p&gt;
&lt;p&gt;注意，当一组学生被选中时，他们之间可以以任何可能的方式重新排序，而未被选中的学生应该保持不动。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：heights = [1,1,4,2,1,3]
输出：3 
解释：
当前数组：[1,1,4,2,1,3]
目标数组：[1,1,1,2,3,4]
在下标 2 处（从 0 开始计数）出现 4 vs 1 ，所以我们必须移动这名学生。
在下标 4 处（从 0 开始计数）出现 1 vs 3 ，所以我们必须移动这名学生。
在下标 5 处（从 0 开始计数）出现 3 vs 4 ，所以我们必须移动这名学生。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;示例 2：**&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：heights = [5,1,2,3,4]
输出：5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：heights = [1,2,3,4,5]
输出：0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 &amp;lt;= heights.length &amp;lt;= 100
1 &amp;lt;= heights[i] &amp;lt;= 100
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;解题思路&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;首先我们其实并不关心排序后得到的结果，我们想知道的只是在该位置上，与最小的值是否一致
1.先排序
2.然后遍历，比较对应下标的元素是否相同，不同加1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;sort&amp;quot;
)

func heightChecker(heights []int) int {
	length := len(heights)
	// todo: 切片和数组的本质区别是什么
	// todo: 有上述疑问，是因为 var copy_heights []int 会报错！！
	var copy_heights = make([]int, length)

	copy(copy_heights, heights)
	sort.Ints(heights)

	var count int

	for index, value := range heights {
		if copy_heights[index] != value {
			count += 1
		}
	}

	return count
}

func main() {
	var heights = []int{5, 1, 2, 3, 4}
	count := heightChecker(heights)
	fmt.Println(count)
}

&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/%E6%95%B0%E7%BB%84/">数组</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/leetcode/">leetcode</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Offer22 链表中倒数第K个节点</title>
                <link>https://affectalways.github.io/posts/leetcode/%E9%93%BE%E8%A1%A8/offer22%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/leetcode/%E9%93%BE%E8%A1%A8/offer22%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/</guid>
                <pubDate>Wed, 22 Jul 2020 23:15:30 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h4 id=&#34;剑指-offer-22-链表中倒数第k个节点httpsleetcode-cncomproblemslian-biao-zhong-dao-shu-di-kge-jie-dian-lcof&#34;&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/&#34;&gt;剑指 Offer 22. 链表中倒数第k个节点&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;给定一个链表: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, 和 k = 2.

返回链表 4-&amp;gt;5.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;解题思路&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.快指针和慢指针相差k
2.快指针到达链尾，慢指针所指方向就是倒数第k个链表
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution(object):
    def getKthFromEnd(self, head, k):
        &amp;quot;&amp;quot;&amp;quot;
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        &amp;quot;&amp;quot;&amp;quot;
        fast = head
        for i in range(k):
            fast = fast.next

        cur = head
        while fast:
            cur = cur.next
            fast = fast.next
            
        return cur
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;解题思路&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.获取链表长度
2.开始遍历（链表长度-k）次数
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution(object):
    def getKthFromEnd(self, head, k):
        &amp;quot;&amp;quot;&amp;quot;
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        &amp;quot;&amp;quot;&amp;quot;
        length = 0
        cur = head
        while cur:
            length += 1
            cur = cur.next

        cur = head
        index = length - k
        for i in range(index):
            cur = cur.next

        return cur
&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/%E9%93%BE%E8%A1%A8/">链表</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/leetcode/">leetcode</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>141环形链表</title>
                <link>https://affectalways.github.io/posts/leetcode/%E9%93%BE%E8%A1%A8/141%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/leetcode/%E9%93%BE%E8%A1%A8/141%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</guid>
                <pubDate>Wed, 22 Jul 2020 22:13:40 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h4 id=&#34;141-环形链表httpsleetcode-cncomproblemslinked-list-cycle&#34;&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/linked-list-cycle/&#34;&gt;141. 环形链表&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;给定一个链表，判断链表中是否有环。&lt;/p&gt;
&lt;p&gt;为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [3,2,0,-4], pos = 1
输出：true
解释：链表中有一个环，其尾部连接到第二个节点。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [1,2], pos = 0
输出：true
解释：链表中有一个环，其尾部连接到第一个节点。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [1], pos = -1
输出：false
解释：链表中没有环。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进阶：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你能用 &lt;em&gt;O(1)&lt;/em&gt;（即，常量）内存解决此问题吗？&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;当一个链表有环时，快慢指针都会陷入环中进行无限次移动，然后变成了追及问题。想象一下在操场跑步的场景，只要一直跑下去，快的总会追上慢的。当两个指针都进入环后，每轮移动使得慢指针到快指针的距离增加一，同时快指针到慢指针的距离也减少一，只要一直移动下去，快指针总会追上慢指针。
根据上述表述得出，如果一个链表存在环，那么快慢指针必然会相遇。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://pic.leetcode-cn.com/d1ac82780e5189d7d58406504c3b7b56c35165997bfbb4c325677af92ee2d483.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# -*- coding: utf-8 -*-
# @Time     : 2020/7/22 22:19
# @Author   : affectalways
# @Site     : 
# @Contact  : affectalways@gmail.com
# @File     : 141.py
# @Software : PyCharm 

# -*- coding: utf-8 -*-
# @Time     : 2020/7/16 22:27
# @Author   : affectalways
# @Site     :
# @Contact  : affectalways@gmail.com
# @File     : 0201.py
# @Software : PyCharm

# Definition for singly-linked list.
class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None


class Solution(object):
    def hasCycle(self, head):
        &amp;quot;&amp;quot;&amp;quot;
        :type head: ListNode
        :rtype: bool
        &amp;quot;&amp;quot;&amp;quot;
        if not head:
            return False
        fast = head.next
        slow = head
        while fast != slow:
            if fast is None or fast.next is None:
                return False
            slow = slow.next
            fast = fast.next.next
        return True


def create_link(tmp):
    head = None
    cur = None
    for i in tmp:
        node = ListNode(i)
        if head is None:
            head = node
            cur = head
        else:
            cur.next = node
            cur = cur.next
    return head


def traversal_link(head):
    cur = head
    while cur:
        print(cur.val)
        cur = cur.next


if __name__ == &#39;__main__&#39;:
    head = create_link([1, 2, 3, 3, 2, 1])
    # traversal_link(head)
    solution = Solution()
    result = solution.hasCycle(head)
    traversal_link(result)

&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/%E9%93%BE%E8%A1%A8/">链表</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/leetcode/">leetcode</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Instagram在PyCon2017的演讲摘要</title>
                <link>https://affectalways.github.io/posts/python/instagram%E5%9C%A8pycon2017%E7%9A%84%E6%BC%94%E8%AE%B2%E6%91%98%E8%A6%81/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/python/instagram%E5%9C%A8pycon2017%E7%9A%84%E6%BC%94%E8%AE%B2%E6%91%98%E8%A6%81/</guid>
                <pubDate>Tue, 21 Jul 2020 22:38:37 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;p&gt;&lt;strong&gt;郑重声明：本篇文章非原创，摘自&lt;a href=&#34;https://www.zlovezl.cn/articles/instagram-pycon-2017/&#34;&gt;https://www.zlovezl.cn/articles/instagram-pycon-2017/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.zlovezl.cn/static//uploaded/2017/05/2017-05-30-22-31-37_thumb.jpg&#34; alt=&#34;图：Instagram Loves Python&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;pycon-简介&#34;&gt;PyCon 简介&lt;/h2&gt;
&lt;p&gt;PyCon 是全世界最大的以 &lt;a href=&#34;https://en.wikipedia.org/wiki/Python_(programming_language)&#34;&gt;Python 编程语言&lt;/a&gt; 为主题的技术大会。大会由 Python 社区组织，每年举办一次。在大会上，来自世界各地的 Python 用户与核心开发者齐聚一堂，共同分享 Python 世界的新鲜事、Python 语言的应用案例、使用技巧等等内容。&lt;/p&gt;
&lt;h2 id=&#34;instagram-简介&#34;&gt;Instagram 简介&lt;/h2&gt;
&lt;p&gt;Instagram 是一款移动端的照片与视频分享软件，由 Kevin Systrom 和 Mike Krieger 在 2010 年创办。Instagram 在发布后开始快速流行。于 2012 年被 Facebook 以 10 亿美元的价格收购。而当时 Instagram 的员工仅有区区 13 名。&lt;/p&gt;
&lt;p&gt;如今，&lt;strong&gt;Instagram 的总注册用户达到 30 亿，月活用户超过 7 亿&lt;/strong&gt; &lt;em&gt;（作为对比，微信最新披露的月活跃用户为 9.38 亿）&lt;/em&gt;。而令人吃惊的是，这么高的访问量背后，竟完全是由以速度慢著称的 Python + Django 支撑。&lt;/p&gt;
&lt;p&gt;在 Python 2017 上，Instagram 的工程师们带来了一个有关 Python 在 Instagram 的主题演讲，同时还分享了 Instagram 如何将整个项目运行环境升级到 Python 3 的故事。&lt;/p&gt;
&lt;p&gt;本文为该次演讲的内容摘要。&lt;/p&gt;
&lt;h2 id=&#34;python-instagram&#34;&gt;Python @Instagram&lt;/h2&gt;
&lt;h3 id=&#34;为什么选择-python-和-django&#34;&gt;为什么选择 Python 和 Django&lt;/h3&gt;
&lt;p&gt;Instagram 选择 Django 的原因很简单，Instagram 的两位创始人 &lt;em&gt;(Kevin Systrom and Mike Krieger)&lt;/em&gt; 都是产品经理出身。&lt;strong&gt;在他们想要创造 Instagram 时，Django 是他们所知道的最稳定和成熟的技术之一。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;时至今日，即使已经拥有超过 30 亿的注册用户。Instagram 仍然是 Python 和 Django 的重度使用者。Instagram 的工程师 Hui Ding 说到： &lt;em&gt;『一直到用户 ID 已经超过了 32bit int 的限额（约为 20 亿），Django 本身仍然没有成为我们的瓶颈所在。』&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;不过，除了使用 Django 的原生功能外，Instagram 还对 Django 做了很多定制化工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;扩展 Django Models 使其支持 Sharding &lt;em&gt;（一种数据库分片技术）&lt;/em&gt;，&lt;a href=&#34;https://engineering.instagram.com/@InstagramEng&#34;&gt;Instagram Engneering&lt;/a&gt; 博客专门为这件事情写过一篇博客，可参阅：&lt;a href=&#34;https://engineering.instagram.com/sharding-ids-at-instagram-1cf5a71e5a5c&#34;&gt;Sharding &amp;amp; IDs at Instagram&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;手动关闭 GC（垃圾回收）来提升 Python 内存管理效率，他们同样也写过一篇博客来说明这件事情：&lt;a href=&#34;https://engineering.instagram.com/dismissing-python-garbage-collection-at-instagram-4dca40b29172&#34;&gt;Dismissing Python Garbage Collection at Instagram&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在位于不同地理位置的多个数据中心部署整套系统&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;python-语言的优势所在&#34;&gt;Python 语言的优势所在&lt;/h3&gt;
&lt;p&gt;Instagram 的联合创始人 Mike Krieger 说过： &lt;em&gt;『我们的用户根本不关心 Instagram 使用了哪种关系数据库，他们当然也不关心 Instagram 是用什么编程语言开发的。』&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;所以，Python 这种 &lt;strong&gt;简单&lt;/strong&gt; 而且 &lt;strong&gt;实用至上&lt;/strong&gt; 的编程语言最终赢得了 Instagram 的青睐。他们认为，使用 Python 这种简单的语言有助于塑造 Instagram 的工程师文化，那就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;专注于定位问题、解决问题&lt;/strong&gt; - 而不是工具本身的各种花花绿绿的特性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用那些经过市场验证过的成熟技术方案&lt;/strong&gt; - 而不用被工具本身的问题所烦扰&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户至上：专注于用户所能看到的新特性，为用户带去价值&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是，即使使用 Python 语言有这么多好处，它还是很慢，不是吗？&lt;/p&gt;
&lt;p&gt;不过，这对于 Instagram 不是问题，因为他们认为：&lt;strong&gt;『Instagram 的最大瓶颈在于开发效率，而不是代码的执行效率』&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;At Instagram, our bottleneck is development velocity, not pure code execution.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，最终的结论是：&lt;strong&gt;你完全可以使用 Python 语言来实现一个超过几十亿用户使用的产品，而根本不用担心语言或框架本身的性能瓶颈。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;如何提升运行效率&#34;&gt;如何提升运行效率&lt;/h3&gt;
&lt;p&gt;但是，即使是选用了拥有诸多好处的 Python 和 Django。在 Instagram 的用户数迅速增长的过程中，性能问题还是出现了：&lt;strong&gt;服务器数量的增长率已经慢慢的超过了用户增长率&lt;/strong&gt;。Instagram 是怎么应对这个问题的呢？&lt;/p&gt;
&lt;p&gt;他们使用了这些手段来缓解性能问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;开发工具来帮助调优&lt;/strong&gt;：Instagram 开发了很多涵盖各个层面的工具，来帮助他们进行性能调优以及找到性能瓶颈。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用 C/C++ 来重写部分组件&lt;/strong&gt;：把那些稳定而且对性能最敏感的组件，使用 C 或 C++ 来重写，比如访问 memcache 的 library。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用 Cython&lt;/strong&gt;：Cython 也是他们用来提升 Python 效率的法宝之一。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了上面这些手段，他们还在探索异步 IO 以及新的 Python Runtime 所能带来的性能可能性。&lt;/p&gt;
&lt;h3 id=&#34;升级到-python-3&#34;&gt;升级到 Python 3&lt;/h3&gt;
&lt;p&gt;在相当长的一段时间，Instagram 都跑在 Python 2.7 + Django 1.3 的组合之上。在这个已经落后社区很多年的环境上，他们的工程师们还打了非常非常多的小 patch。难道他们要被永远卡在这个版本上吗？&lt;/p&gt;
&lt;p&gt;所以，在经过一系列的讨论后，他们最终做出一个重大的决定：&lt;strong&gt;升级到 Python 3！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;事实上，Instagram 目前已经完成了将运行环境迁移到 Python 3 的工作 - 他们的整套服务已经在 Python 3 上跑了好几个月了。那么他们是怎么做到的呢？接下来便是由 Instagram 工程师 Lisa guo 带来的 Instagram 如何迁移到 Python 3 的故事。&lt;/p&gt;
&lt;h2 id=&#34;instagram-升级到-python-3-的故事&#34;&gt;Instagram 升级到 Python 3 的故事&lt;/h2&gt;
&lt;h3 id=&#34;为什么要升级到-python-3&#34;&gt;为什么要升级到 Python 3&lt;/h3&gt;
&lt;p&gt;对于 Instagram 来说，下面这些因素是推动他们将运行环境迁移到 Python 3 的主要原因：&lt;/p&gt;
&lt;h4 id=&#34;1-新特性类型注解-type-annotations&#34;&gt;1. 新特性：类型注解 Type Annotations&lt;/h4&gt;
&lt;p&gt;看看下面这段代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def compose_from_max_id(max_id):
    &#39;&#39;&#39;@param str max_id&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;图中函数的 &lt;code&gt;max_id&lt;/code&gt; 参数究竟是什么类型呢？int？tuple？或是 list? 等等，函数文档里面说它是 str 类型。&lt;/p&gt;
&lt;p&gt;但随着时间推移，万一这个参数的类型发生变化了呢？如果某位粗心的工程师修改代码的同时忘了更新文档，那就会给函数的使用者带来很大麻烦，最终还不如没有注释呢。&lt;/p&gt;
&lt;h4 id=&#34;2-性能&#34;&gt;2. 性能&lt;/h4&gt;
&lt;p&gt;Instagram 的整个 Django Stack 都跑在 uwsgi 之上，全部使用了同步的网络 IO。这意味着同一个 uwsgi 进程在同一时间只能接收并处理一个请求。这让如何调优每台机器上应该运行的 uwsgi 进程数成了一个麻烦事：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;为了更好利用 CPU，使用更多的进程数？但那样会消耗大量的内存。而过少的进程数量又会导致 CPU 不能被充分利用。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;为此，他们决定跳过 Python 2 中哪些蹩脚的异步 IO 实现 &lt;em&gt;（可怜的 gevent、tornado、twisted 众）&lt;/em&gt;，直接升级到 Python 3，去探索标准库中的 asyncio 模块所能带来的可能性。&lt;/p&gt;
&lt;h4 id=&#34;3-社区&#34;&gt;3. 社区&lt;/h4&gt;
&lt;p&gt;因为 Python 社区已经停止了对 Python 2 的支持。如果把整个运行环境升级到 Python 3，Instagram 的工程师们就能和 Python 社区走的更近，可以更好的把他们的工作回馈给社区。&lt;/p&gt;
&lt;h3 id=&#34;确定迁移方案&#34;&gt;确定迁移方案&lt;/h3&gt;
&lt;p&gt;在 Instagram，进行 Python 3 的迁移需要必须满足两个前提条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不停机，不能有任何的服务因此不可用&lt;/li&gt;
&lt;li&gt;不能影响产品新特性的开发&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是，在 Instagram 的开发环境中，要满足上面这两点来完成迁移到 Python 3.6 这种庞大的工程是非常困难的。&lt;/p&gt;
&lt;h4 id=&#34;基于主分支的开发流程&#34;&gt;基于主分支的开发流程&lt;/h4&gt;
&lt;p&gt;即便使用了以多分支功能著称的 git，Instagram 所有的开发工作都是主要在 master 分支上进行的，Instagram 所奉行的开发哲学是：&lt;strong&gt;『不管是多大的新特性或代码重构，都应该拆解成较小的 Commit 来进行。』&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那些被合并进 master 分支的代码，都将在一个小时内被发布到线上环境。**而这样的发布过程每天将会发生上百次。**在这么频繁的发布频率下，如何在满足之前的那两个前提下来完成迁移变得尤其困难。&lt;/p&gt;
&lt;h4 id=&#34;被弃用的迁移方案&#34;&gt;被弃用的迁移方案&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;创建一个新分支&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多人在处理这类问题时，第一个蹦进脑子的想法就是： &lt;em&gt;『让我们创建一个分支，当我们开发完后，再把分支合并进来』&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;但在 Instagram 这么高的迭代频率上，使用一个独立分支并不是好主意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Instagram 的 Codebase 每天都在频繁更新，在开发 Python 3 分支的过程中，让新分支与现有 master 分支保持同步开销极大，同时极易出错&lt;/li&gt;
&lt;li&gt;最终将 Python 3 分支这个改动非常多的分支合并回 Master 拥有非常高的风险&lt;/li&gt;
&lt;li&gt;只有少数几个工程师在 Python 3 分支上专职负责升级工作，其他想帮助迁移工作的工程师无法参与进来&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;挨个替换接口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还有一个方案就是，挨个替换 Instagram 的 API 接口。但是 Instagram 的不同接口共享着很多通用模块。这个方案要实施起来也非常困难。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;微服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还有一个方案就是将 Instagram 改造成微服务架构。通过将那些通用模块重写成 Python 3 版本的微服务来一步步完成迁移工作。&lt;/p&gt;
&lt;p&gt;但是这个方案需要重新组织海量的代码。同时，当发生在进程内的函数调用变成 RPC 后 ，整个站点的延迟会变大。此外，更多的微服务也会引入更高的部署复杂度。&lt;/p&gt;
&lt;p&gt;所以，既然 Instagram 的开发哲学是：&lt;strong&gt;小步前进，快速迭代&lt;/strong&gt;。他们最终决定的方案是：&lt;strong&gt;一步一步来，最终让 master 分支上的代码同时兼容 Python 2 和 Python 3 。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;开始迁移工作&#34;&gt;开始迁移工作&lt;/h3&gt;
&lt;p&gt;既然要让整个 codebase 同时兼容 Python 2 和 Python 3，那么首先要符合这点的就是那些被大量使用的第三方 package。针对第三方 package，Instagram 做到了下面几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拒绝引入所有不兼容 Python 3 的新 package&lt;/li&gt;
&lt;li&gt;去掉所有不再使用的 package&lt;/li&gt;
&lt;li&gt;替换那些不兼容 Python 3 的 package&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在代码的迁移过程中，他们使用了工具 &lt;a href=&#34;https://python-modernize.readthedocs.io/en/latest/&#34;&gt;modernize&lt;/a&gt; 来帮助他们。&lt;/p&gt;
&lt;p&gt;使用 modernize 时，有一个小技巧：&lt;strong&gt;每次修复多个文件的一个兼容问题，而不是一下修复一个文件中的多个兼容问题。&lt;/strong&gt; 这样可以让 Code Review 过程简单很多，因为 Reviewer 每次只需要关注一个问题。&lt;/p&gt;
&lt;h3 id=&#34;使用单元测试来帮助迁移&#34;&gt;使用单元测试来帮助迁移&lt;/h3&gt;
&lt;p&gt;对于 Python 这种灵活性极强的动态语言来说，除了真正去执行代码外，几乎没有其他比较好的检查代码错误的手段。&lt;/p&gt;
&lt;p&gt;前面提到，Instagram 所有被合并到 master 的代码提交会在一个小时内上线到线上环境，但这不是没有前提条件的。&lt;strong&gt;在上线前，所有的提交都需要通过成千上万个单元测试。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;于是，他们开始加入 Python 3 来执行所有的单元测试。一开始，只有极少数的单元测试能够在 Python 3 环境下通过，但随着 Instagram 的工程师们不断的修复那些失败的单元测试，最终所有的单元测试都可以在 Python 3 环境下成功执行。&lt;/p&gt;
&lt;h4 id=&#34;单元测试的局限性&#34;&gt;单元测试的局限性&lt;/h4&gt;
&lt;p&gt;但是，单元测试也是有局限性的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Instagram 的单元测试没有做到 100% 的代码覆盖率&lt;/li&gt;
&lt;li&gt;很多第三方模块都使用了 mock 技术，而 mock 的行为与真实的线上服务可能会有所不同&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，当所有的单元测试都被修复后，他们开始在线上正式使用 Python 3 来运行服务。&lt;/p&gt;
&lt;p&gt;这个过程并不是一蹴而就的。首先，所有的 Instagram 工程师开始访问到这些使用 Python 3 来执行的新服务，然后是 Facebook 的所有雇员，随后是 0.1%、20% 的用户，最终 Python 3 覆盖到了所有的 Instagram 用户。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.zlovezl.cn/static//uploaded/2017/05/2017-05-29-09-35-43_thumb.jpg&#34; alt=&#34;图：循序渐进的发布流程&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;迁移过程的技术问题&#34;&gt;迁移过程的技术问题&lt;/h3&gt;
&lt;p&gt;Instagram 在迁移到 Python 3 时碰到很多问题，下面是最典型的几个：&lt;/p&gt;
&lt;h4 id=&#34;unicode-相关的字符串问题&#34;&gt;Unicode 相关的字符串问题&lt;/h4&gt;
&lt;p&gt;Python 3 相比 Python 2 最大的改动之一，就是在语言内部对 unicode 的处理。&lt;/p&gt;
&lt;p&gt;在 Python 2 中，文本类型 &lt;em&gt;（也就是 unicode）&lt;/em&gt; 和二进制类型 &lt;em&gt;（也就是 str）&lt;/em&gt; 的边界非常模糊。很多函数的参数既可以是文本，也可以是二进制。但是在 Python 3 中，文本类型和二进制类型的字符串被完全的区分开了。&lt;/p&gt;
&lt;p&gt;于是，下面这段在 Python 2 下可以正常运行的代码在 Python 3 下就会报错：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mymac = hmac.new(&#39;abc&#39;)
TypeError: key: expected bytes or bytearray, but got &#39;str&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解决办法其实很简单，只要加上判断：如果 value 是文本类型，就将其转换为二进制。如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;value = &#39;abc&#39;
if isinstance(value, six.text_type):
    value = value.encode(encoding=&#39;utf-8&#39;)
mymac = hmac.new(value)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是，在整个代码库中，像上面这样的情况非常多。作为开发人员，如果需要在调用每个函数时都要想想： &lt;em&gt;这里到底是应该编码成二进制，或者是解码成文本呢？&lt;/em&gt; 将会是非常大的负担。&lt;/p&gt;
&lt;p&gt;于是 Instagram 封装了一些名为 &lt;code&gt;ensure_str()&lt;/code&gt;、&lt;code&gt;ensure_binary()&lt;/code&gt;、&lt;code&gt;ensure_text()&lt;/code&gt; 的帮助函数，开发人员只需对那些不确定类型的字符串，使用这些帮助函数先做一次转换就好。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mymac = hmac.new(ensure_binary(&#39;abc&#39;))
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;不同-python-版本的-pickle-差异&#34;&gt;不同 Python 版本的 pickle 差异&lt;/h4&gt;
&lt;p&gt;Instagram 的代码中大量使用了 pickle。比如用它序列化某个对象，然后将其存储在 memcache 中。如下面的代码所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;memcache_data = pickle.dumps(data, pickle.HIGHEST_PROTOCOL)
data = pickle.loads(memcache_data)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;问题在于，Python 2 与 Python 3 的 pickle 模块是有差别的。&lt;/p&gt;
&lt;p&gt;如果上文的第一行代码，刚好是由 Python 3 运行的服务进行序列化后存入 memcache。而反序列化的过程却是由 Python 2 进行，那代码运行时就会出现下面的错误：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ValueError: unsupported pickle protocol: 4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是由于在 Python 3 中，&lt;code&gt;pickle.HIGHEST_PROTOCOL&lt;/code&gt; 的值为 &lt;code&gt;4&lt;/code&gt;，而 Python 2 中的的 pickle 最高支持的版本号却是 &lt;code&gt;2&lt;/code&gt;。那么如何解决这个问题呢？&lt;/p&gt;
&lt;p&gt;Instagram 最终选择让 Python 2 和 Python 3 使用完全不同的 namespace 来访问 memcache。通过将二者的数据读写完全隔开来解决这个问题。&lt;/p&gt;
&lt;h4 id=&#34;迭代器&#34;&gt;迭代器&lt;/h4&gt;
&lt;p&gt;在 Python 3 中，很多内置函数被修改成了只返成迭代器 Iterator：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map()
filter()
dict.items()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;迭代器有诸多好处，最大的好处就是，使用迭代器不需要一次性分配大量内存，所以它的内存效率比较高。&lt;/p&gt;
&lt;p&gt;但是迭代器有一个天然的特点，当你对某个迭代器做了一次迭代，访问完它的内容后，就没法再次访问那些内容了。&lt;strong&gt;迭代器中的所有内容都只能被访问一次。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 Instagram 的 Python 3 迁移过程中，就因为迭代器的这个特性被坑了一次，看看下面这段代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CYTHON_SOURCES = [a.pyx, b.pyx, c.pyx]
builds = map(BuildProcess, CYTHON_SOURCES)
while any(not build.done() for build in builds):
    pending = [build for build in builds if not build.started()]
    &amp;lt;do some work&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这段代码的用处是挨个编译 Cython 源文件。当他们把运行环境切换到 Python 3 后，一个奇怪的问题出现了：**CYTHON_SOURCES 中的第一个文件永远都被跳过了编译。**为什么呢？&lt;/p&gt;
&lt;p&gt;这都是迭代器的锅。在 Python 3 中，&lt;code&gt;map()&lt;/code&gt; 函数不再返回整个 list，而是返回一个迭代器。&lt;/p&gt;
&lt;p&gt;于是，当第二行代码生成 builds 这个迭代器后，第三行代码的 while 循环迭代了 builds，刚好取出了第一个元素。&lt;strong&gt;于是之后的 pending 对象便里面永远少了那第一个元素。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个问题解决起来也挺简单的，你只要手动的吧 builds 转换成 list 就可以了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;builds = list(map(BuildProcess, CYTHON_SOURCES))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是这类 bug 非常难定位到。如果用户的 feeds 里面永远少了那最新的第一条，用户很少会注意到。&lt;/p&gt;
&lt;h4 id=&#34;字典的顺序&#34;&gt;字典的顺序&lt;/h4&gt;
&lt;p&gt;看看下面这段代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; testdict = {&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3}
&amp;gt;&amp;gt;&amp;gt; json.dumps(testdict)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;它会输出什么结果呢？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Python2
&#39;{&amp;quot;a&amp;quot;: 1, &amp;quot;c&amp;quot;: 3, &amp;quot;b&amp;quot;: 2}&#39;
# Python 3.5.1
&#39;{&amp;quot;c&amp;quot;: 3, &amp;quot;b&amp;quot;: 2, &amp;quot;a&amp;quot;: 1}&#39;    # or
&#39;{&amp;quot;c&amp;quot;: 3, &amp;quot;a&amp;quot;: 1, &amp;quot;b&amp;quot;: 2}&#39;
# Python 3.6
&#39;{&amp;quot;a&amp;quot;: 1, &amp;quot;b&amp;quot;: 2, &amp;quot;c&amp;quot;: 3}&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在不同的 Python 版本下，这个 json dumps 的结果是完全不一样的。甚至在 3.5.1 中，它会完全随机的返回两个不同的结果。Instagram 有一段判断配置文件是否发生变动的模块，就是因为这个原因出了问题。&lt;/p&gt;
&lt;p&gt;这个问题的解决办法是，在调用 &lt;code&gt;json.dumps&lt;/code&gt; 传入 &lt;code&gt;sort_keys=True&lt;/code&gt; 参数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; json.dumps(testdict, sort_keys=True)
&#39;{&amp;quot;a&amp;quot;: 1, &amp;quot;b&amp;quot;: 2, &amp;quot;c&amp;quot;: 3}&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;迁移到-python-36-后的性能提升&#34;&gt;迁移到 Python 3.6 后的性能提升&lt;/h3&gt;
&lt;p&gt;当 Instagram 解决了这些奇奇怪怪的版本差异问题后，还有一个巨大的谜题困扰着他们：&lt;strong&gt;性能问题&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在 Instagram，他们使用两个主要指标来衡量他们的服务性能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每次请求产生的 CPU 指令数（越低越好）&lt;/li&gt;
&lt;li&gt;每秒能够处理的请求数（越高越好）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，当所有的迁移工作完成后，他们非常惊喜的发现：&lt;strong&gt;第一个性能指标，每次请求产生的 CPU 指令数居然足足下降了 12% ！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是，按理说第二个指标 - 每秒请求数也应该获得接近 12% 的提升。不过最后的变化却是 0%。究竟是出了什么问题呢？&lt;/p&gt;
&lt;p&gt;他们最终定位到，是由于不同 Python 版本下的内存优化配置不同，导致 CPU 指令数下降带来的性能提升被抵消了。那为什么不同 Python 版本下的内存优化配置会不一样呢？&lt;/p&gt;
&lt;p&gt;这是他们用来检查 uwsgi 配置的代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if uwsgi.opt.get(&#39;optimize_mem&#39;, None) == &#39;True&#39;:
    optimize_mem()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意到那段 &lt;code&gt;... ... == &#39;True&#39;&lt;/code&gt; 了吗？在 Python 3 中，这个条件判断总是不会被满足。问题就在于 unicode。在将代码中的 &lt;code&gt;&#39;True&#39;&lt;/code&gt; 换成 &lt;code&gt;b&#39;True&#39;&lt;/code&gt;（也就是将文本类型换成二进制，这种判断在 Python 2 中完全不区分的）后，问题解决了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以，最终因为加上了一个小小的字母 &amp;lsquo;b&amp;rsquo;，程序的整体性能提升了 12%。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;结论&#34;&gt;结论&lt;/h3&gt;
&lt;p&gt;在今年二月份，Instagram 的后端代码的运行环境完全切换到了 Python 3 下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.zlovezl.cn/static//uploaded/2017/05/2017-05-30-15-51-20_thumb.jpg&#34; alt=&#34;图：Instagram 版本迁移时间线&#34;&gt;&lt;/p&gt;
&lt;p&gt;当所有的代码都都迁移到 Python 3 运行环境后：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节约了 12% 的整体 CPU 使用率（Django/uwsgi）&lt;/li&gt;
&lt;li&gt;节约了 30% 的内存使用（celery）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时，在整个迁移期间，Instagram 的月活用户经历了从 4 亿到 6亿 的巨大增长。产品也发布了评论过滤、直播等非常多新功能。&lt;/p&gt;
&lt;p&gt;那么，那几个最开始驱动他们迁移到 Python 3 的目的呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;类型注解&lt;/strong&gt;：Instagram 的整个 codebase 里已经有 2% 的代码添加上了类型注解，同时他们还开发了一些工具来辅助开发者添加类型提示&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;asyncio&lt;/strong&gt;：他们在单个接口中利用 asynio 平行的去做多件事情，最终降低了 20-30% 的请求延迟。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;社区&lt;/strong&gt;：他们与 Intel 的工程师联合，帮助他们更好的对 CPU 利用率进行调优。同时还开发了很多新的工具，帮助他们进行性能调优&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;instagram-带给我们的启示&#34;&gt;Instagram 带给我们的启示&lt;/h2&gt;
&lt;p&gt;Instagram 的演讲视频时间不长，但是内容很丰富，在编写此文前，我完全没有想到最终的文章会这么长。&lt;/p&gt;
&lt;p&gt;那么，Instagram 的视频可以给我们哪些启示呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python + Django 的组合完全可以负载用户数以 10 亿记的服务，如果你正准备开始一个项目，放心使用 Python 吧！&lt;/li&gt;
&lt;li&gt;完善的单元测试对于复杂项目是非常有必要的。如果没有那『成千上万的单元测试』。很难想象 Instagram 的迁移项目可以成功进行下去。&lt;/li&gt;
&lt;li&gt;开发者和同事也是你的产品用户，利用好他们。用他们为你的新特性发布前多一道测试。&lt;/li&gt;
&lt;li&gt;完全基于主分支的开发流程，可以给你更快的迭代速度。前提是拥有完善的单元测试和持续部署流程。&lt;/li&gt;
&lt;li&gt;Python 3 是大势所趋，如果你正准备开始一个新项目，无需迟疑，拥抱 Python 3 吧！&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/python/">python</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/python/">python</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Offer18删除链表的节点</title>
                <link>https://affectalways.github.io/posts/leetcode/%E9%93%BE%E8%A1%A8/offer18%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E8%8A%82%E7%82%B9/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/leetcode/%E9%93%BE%E8%A1%A8/offer18%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E8%8A%82%E7%82%B9/</guid>
                <pubDate>Mon, 20 Jul 2020 22:49:28 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h4 id=&#34;剑指-offer-18-删除链表的节点httpsleetcode-cncomproblemsshan-chu-lian-biao-de-jie-dian-lcof&#34;&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof/&#34;&gt;剑指 Offer 18. 删除链表的节点&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。&lt;/p&gt;
&lt;p&gt;返回删除后的链表的头节点。&lt;/p&gt;
&lt;p&gt;**注意：**此题对比原题有改动&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: head = [4,5,1,9], val = 5
输出: [4,1,9]
解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&amp;gt; 1 -&amp;gt; 9.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: head = [4,5,1,9], val = 1
输出: [4,5,9]
解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&amp;gt; 5 -&amp;gt; 9.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;题目保证链表中节点的值互不相同&lt;/li&gt;
&lt;li&gt;若使用 C 或 C++ 语言，你不需要 &lt;code&gt;free&lt;/code&gt; 或 &lt;code&gt;delete&lt;/code&gt; 被删除的节点&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;思路&#34;&gt;思路：&lt;/h4&gt;
&lt;p&gt;删除值为 val 的节点可分为两步：定位节点、修改引用。&lt;/p&gt;
&lt;p&gt;定位节点： 遍历链表，直到 head.val == val 时跳出，即可定位目标节点。
修改引用： 设节点 cur 的前驱节点为 pre ，后继节点为 cur.next ；则执行 pre.next = cur.next ，即可实现删除 cur 节点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic.leetcode-cn.com/0091d27673ec013c5557c7f9e7c731d3437f0ce655439269a6e24ce501235e4b-Picture0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;算法流程：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.特例处理： 当应删除头节点 head 时，直接返回 head.next 即可。
2.初始化： pre = head , cur = head.next 。
3.定位节点： 当 cur 为空 或 cur 节点值等于 val 时跳出。
4.保存当前节点索引，即 pre = cur 。
5.遍历下一节点，即 cur = cur.next 。
6.删除节点： 若 cur 指向某节点，则执行 pre.next = cur.next 。（若 cur 指向 nullnull ，代表链表中不包含值为 val 的节点。
7.返回值： 返回链表头部节点 head 即可。


&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# -*- coding: utf-8 -*-
# @Time     : 2020/7/18 23:44
# @Author   : affectalways
# @Site     : 
# @Contact  : affectalways@gmail.com
# @File     : offer18.py
# @Software : PyCharm 

class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None


class Solution(object):
    def deleteNode(self, head, val):
        &amp;quot;&amp;quot;&amp;quot;
        :type head: ListNode
        :type val: int
        :rtype: ListNode
        &amp;quot;&amp;quot;&amp;quot;
        if head.val == val:
            return head.next
        pre, cur = head, head.next
        while cur and cur.val != val:
            pre, cur = cur, cur.next
        if cur:
            pre.next = cur.next
        return head


def create_link(tmp):
    cur = head = None
    for i in tmp:
        node = ListNode(i)
        if head is None:
            head = node
            cur = head
        else:
            cur.next = node
            cur = cur.next

    return head


def traversal_link(head):
    cur = head
    while cur:
        print(cur.val)
        cur = cur.next


if __name__ == &#39;__main__&#39;:
    head = create_link([4, 5, 1, 9])
    traversal_link(head)

&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/%E9%93%BE%E8%A1%A8/">链表</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/leetcode/">leetcode</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>876 链表的中间结点</title>
                <link>https://affectalways.github.io/posts/leetcode/%E9%93%BE%E8%A1%A8/876%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E7%BB%93%E7%82%B9/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/leetcode/%E9%93%BE%E8%A1%A8/876%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E7%BB%93%E7%82%B9/</guid>
                <pubDate>Thu, 16 Jul 2020 22:55:17 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h4 id=&#34;876-链表的中间结点httpsleetcode-cncomproblemsmiddle-of-the-linked-list&#34;&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/middle-of-the-linked-list/&#34;&gt;876. 链表的中间结点&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;给定一个带有头结点 &lt;code&gt;head&lt;/code&gt; 的非空单链表，返回链表的中间结点。&lt;/p&gt;
&lt;p&gt;如果有两个中间结点，则返回第二个中间结点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：[1,2,3,4,5]
输出：此列表中的结点 3 (序列化形式：[3,4,5])
返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。
注意，我们返回了一个 ListNode 类型的对象 ans，这样：
ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：[1,2,3,4,5,6]
输出：此列表中的结点 4 (序列化形式：[4,5,6])
由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定链表的结点数介于 &lt;code&gt;1&lt;/code&gt; 和 &lt;code&gt;100&lt;/code&gt; 之间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法一：数组&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;链表的缺点在于不能通过下标访问对应的元素。因此我们可以考虑对链表进行遍历，同时将遍历到的元素依次放入数组 A 中。如果我们遍历到了 N 个元素，那么链表以及数组的长度也为 N，对应的中间节点即为 A[N/2]。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;方法二：单指针法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;我们可以对方法一进行空间优化，省去数组 A。

我们可以对链表进行两次遍历。第一次遍历时，我们统计链表中的元素个数 N；第二次遍历时，我们遍历到第 N/2 个元素（链表的首节点为第 0 个元素）时，将该元素返回即可。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;方法三：快慢指针法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
我们可以继续优化方法二，用两个指针 slow 与 fast 一起遍历链表。slow 一次走一步，fast 一次走两步。那么当 fast 到达链表的末尾时，slow 必然位于中间。

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# -*- coding: utf-8 -*-
# @Time     : 2020/7/16 23:03
# @Author   : affectalways
# @Site     : 
# @Contact  : affectalways@gmail.com
# @File     : 876.py
# @Software : PyCharm 

# Definition for singly-linked list.
class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None


class Solution(object):
    def middleNode(self, head):
        &amp;quot;&amp;quot;&amp;quot;
        :type head: ListNode
        :rtype: ListNode
        &amp;quot;&amp;quot;&amp;quot;
        slow = fast = head

        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next

        return slow


def create_link(tmp):
    head = None
    cur = None
    for i in tmp:
        node = ListNode(i)
        if head is None:
            head = node
            cur = head
        else:
            cur.next = node
            cur = cur.next
    return head


def traversal_link(head):
    cur = head
    while cur:
        print(cur.val)
        cur = cur.next


if __name__ == &#39;__main__&#39;:
    head = create_link([1, 2, 3, 4, 5])
    solution = Solution()
    node = solution.middleNode(head)
    print(node.val)

&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/%E9%93%BE%E8%A1%A8/">链表</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/leetcode/">leetcode</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>0201 移除重复节点</title>
                <link>https://affectalways.github.io/posts/leetcode/%E9%93%BE%E8%A1%A8/0201%E7%A7%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E8%8A%82%E7%82%B9/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/leetcode/%E9%93%BE%E8%A1%A8/0201%E7%A7%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E8%8A%82%E7%82%B9/</guid>
                <pubDate>Thu, 16 Jul 2020 22:42:51 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h4 id=&#34;面试题-0201-移除重复节点httpsleetcode-cncomproblemsremove-duplicate-node-lcci&#34;&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/remove-duplicate-node-lcci/&#34;&gt;面试题 02.01. 移除重复节点&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;编写代码，移除未排序链表中的重复节点。保留最开始出现的节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 输入：[1, 2, 3, 3, 2, 1]
 输出：[1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 输入：[1, 1, 1, 1, 2]
 输出：[1, 2]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;链表长度在[0, 20000]范围内。&lt;/li&gt;
&lt;li&gt;链表元素在[0, 20000]范围内。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;进阶：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果不得使用临时缓冲区，该怎么解决？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;哈希-on&#34;&gt;哈希 O(n)&lt;/h4&gt;
&lt;p&gt;哈希表存储出现过的元素，如果当前节点出现过，就删掉&lt;/p&gt;
&lt;p&gt;我们从链表的头节点&lt;code&gt;head&lt;/code&gt; 开始进行遍历，遍历的指针记为&lt;code&gt;cur&lt;/code&gt;。由于头节点一定不会被删除，因此我们可以枚举待移除节点的前驱节点&lt;code&gt;pre&lt;/code&gt;，减少编写代码的复杂度。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# -*- coding: utf-8 -*-
# @Time     : 2020/7/16 22:27
# @Author   : affectalways
# @Site     : 
# @Contact  : affectalways@gmail.com
# @File     : 0201.py
# @Software : PyCharm 

# Definition for singly-linked list.
class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None


class Solution(object):
    def removeDuplicateNodes(self, head):
        &amp;quot;&amp;quot;&amp;quot;
        :type head: ListNode
        :rtype: ListNode
        &amp;quot;&amp;quot;&amp;quot;
        if not head:
            return head
        tmp = {head.val}
        pre = head
        cur = pre.next
        while cur:
            if cur.val in tmp:
                pre.next = cur.next
                cur = cur.next
            else:
                tmp.add(cur.val)
                pre = pre.next
                cur = cur.next
        return head


def create_link(tmp):
    head = None
    cur = None
    for i in tmp:
        node = ListNode(i)
        if head is None:
            head = node
            cur = head
        else:
            cur.next = node
            cur = cur.next
    return head


def traversal_link(head):
    cur = head
    while cur:
        print(cur.val)
        cur = cur.next


if __name__ == &#39;__main__&#39;:
    head = create_link([1, 2, 3, 3, 2, 1])
    # traversal_link(head)
    solution = Solution()
    result = solution.removeDuplicateNodes(head)
    traversal_link(result)

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;双指针&#34;&gt;双指针&lt;/h4&gt;
&lt;p&gt;固定p指针，右侧q指针扫描，然后移动p，指针q再次扫描
时间复杂度 O(n^2)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Definition for singly-linked list.
class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None


class Solution(object):
    def removeDuplicateNodes(self, head):
        &amp;quot;&amp;quot;&amp;quot;
        :type head: ListNode
        :rtype: ListNode
        &amp;quot;&amp;quot;&amp;quot;
        p = head
        while p:
            q = p
            while q.next:
                if q.next.val == p.val:
                    q.next = q.next.next
                else:
                    q = q.next
            p = p.next

        return head


def create_link(tmp):
    head = None
    cur = None
    for i in tmp:
        node = ListNode(i)
        if head is None:
            head = node
            cur = head
        else:
            cur.next = node
            cur = cur.next
    return head


def traversal_link(head):
    cur = head
    while cur:
        print(cur.val)
        cur = cur.next


if __name__ == &#39;__main__&#39;:
    head = create_link([1, 2, 3, 3, 2, 1])
    # traversal_link(head)
    solution = Solution()
    result = solution.removeDuplicateNodes(head)
    traversal_link(result)

&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/%E9%93%BE%E8%A1%A8/">链表</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/leetcode/">leetcode</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Offer24 反转链表</title>
                <link>https://affectalways.github.io/posts/leetcode/%E9%93%BE%E8%A1%A8/offer24%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/leetcode/%E9%93%BE%E8%A1%A8/offer24%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</guid>
                <pubDate>Thu, 16 Jul 2020 22:24:25 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h4 id=&#34;剑指-offer-24-反转链表httpsleetcode-cncomproblemsfan-zhuan-lian-biao-lcof&#34;&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/&#34;&gt;剑指 Offer 24. 反转链表&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL
输出: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;限制：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0 &amp;lt;= 节点个数 &amp;lt;= 5000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Definition for singly-linked list.
class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None


class Solution(object):
    def reverseList(self, head):
        &amp;quot;&amp;quot;&amp;quot;
        :type head: ListNode
        :rtype: ListNode
        &amp;quot;&amp;quot;&amp;quot;
        cur = head
        pre = None
        while cur:
            after = cur.next
            cur.next = pre
            pre = cur
            cur = after
        return pre


def create_link(tmp):
    head = None
    cur = None
    for i in tmp:
        node = ListNode(i)
        if head is None:
            head = node
            cur = head
        else:
            cur.next = node
            cur = cur.next
    return head


def traversal_link(head):
    cur = head
    while cur:
        print(cur.val)
        cur = cur.next


if __name__ == &#39;__main__&#39;:
    head = create_link([1, 2, 3, 4, 5])
    # traversal_link(head)
    solution = Solution()
    cur = solution.reverseList(head)
    traversal_link(cur)
&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/%E9%93%BE%E8%A1%A8/">链表</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/leetcode/">leetcode</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>1290 二进制链表转整数</title>
                <link>https://affectalways.github.io/posts/leetcode/%E9%93%BE%E8%A1%A8/1290%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%95%B4%E6%95%B0/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/leetcode/%E9%93%BE%E8%A1%A8/1290%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%95%B4%E6%95%B0/</guid>
                <pubDate>Wed, 15 Jul 2020 23:44:39 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h4 id=&#34;1290-二进制链表转整数httpsleetcode-cncomproblemsconvert-binary-number-in-a-linked-list-to-integer&#34;&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/convert-binary-number-in-a-linked-list-to-integer/&#34;&gt;1290. 二进制链表转整数&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;给你一个单链表的引用结点 head。链表中每个结点的值不是 0 就是 1。已知此链表是一个整数数字的二进制表示形式。&lt;/p&gt;
&lt;p&gt;请你返回该链表所表示数字的 十进制值 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/12/15/graph-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [1,0,1]
输出：5
解释：二进制数 (101) 转化为十进制数 (5)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [0]
输出：0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [1]
输出：1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 4：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [1,0,0,1,0,0,1,1,1,0,0,0,0,0,0]
输出：18880
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 5：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [0,0]
输出：0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;链表不为空。
链表的结点总数不超过 30。
每个结点的值不是 0 就是 1。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;如果一个十进制的数字，999要和1拼接，需要999*10+1 = 999∗10+1=9991
如果一个二进制的数字，110要和1拼接，需要110*2+1 = 110∗2+1=1101 （注意按照二进制的方法计算）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution(object):
    def getDecimalValue(self, head):
        &amp;quot;&amp;quot;&amp;quot;
        :type head: ListNode
        :rtype: int
        &amp;quot;&amp;quot;&amp;quot;
        result = 0
        while head:
            result = head.val + (result &amp;lt;&amp;lt; 1)
            head = head.next
        return result
&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/%E9%93%BE%E8%A1%A8/">链表</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/leetcode/">leetcode</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>02.02. 返回倒数第 k 个节点</title>
                <link>https://affectalways.github.io/posts/leetcode/%E9%93%BE%E8%A1%A8/0202%E8%BF%94%E5%9B%9E%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/leetcode/%E9%93%BE%E8%A1%A8/0202%E8%BF%94%E5%9B%9E%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/</guid>
                <pubDate>Wed, 15 Jul 2020 21:20:33 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h4 id=&#34;面试题-0202-返回倒数第-k-个节点httpsleetcode-cncomproblemskth-node-from-end-of-list-lcci&#34;&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/kth-node-from-end-of-list-lcci/&#34;&gt;面试题 02.02. 返回倒数第 k 个节点&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;实现一种算法找出单向链表中倒数第-k-个节点返回该节点的值&#34;&gt;实现一种算法，找出单向链表中倒数第 k 个节点。返回该节点的值。&lt;/h4&gt;
&lt;p&gt;注意：本题相对原题稍作改动&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入： 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5 和 k = 2
输出： 4
说明：
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;给定的 k 保证是有效的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;经典的快慢指针问题&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
反向思考，既然是寻找倒数第K个，那么计算机只能循环后移，不如我们先将位置确定，让其同步后移到链尾。
设置前后指针都先指向头结点，后指针先移动到第K个结点，那么前后指针此时相距K个位置。同步后移，当后指针指向链尾时，前指针就自然指向倒数第K个结点
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;class Solution(object):
    def kthToLast(self, head, k):
        &amp;quot;&amp;quot;&amp;quot;
        :type head: ListNode
        :type k: int
        :rtype: int
        &amp;quot;&amp;quot;&amp;quot;
        if head is None:
            return None

        left = head
        right = head
        count = 0
        while count &amp;lt; k:
            right = right.next
            count += 1
        while right:
            left = left.next
            right = right.next
        return left.val
&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/%E9%93%BE%E8%A1%A8/">链表</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/leetcode/">leetcode</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>02.03. 删除中间节点</title>
                <link>https://affectalways.github.io/posts/leetcode/%E9%93%BE%E8%A1%A8/0203%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/leetcode/%E9%93%BE%E8%A1%A8/0203%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9/</guid>
                <pubDate>Wed, 15 Jul 2020 21:20:33 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h4 id=&#34;面试题-0203-删除中间节点httpsleetcode-cncomproblemsdelete-middle-node-lcci&#34;&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/delete-middle-node-lcci/&#34;&gt;面试题 02.03. 删除中间节点&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;实现一种算法，删除单向链表中间的某个节点（即不是第一个或最后一个节点），假定你只能访问该节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：单向链表a-&amp;gt;b-&amp;gt;c-&amp;gt;d-&amp;gt;e-&amp;gt;f中的节点c
结果：不返回任何数据，但该链表变为a-&amp;gt;b-&amp;gt;d-&amp;gt;e-&amp;gt;f
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Solution(object):
    def deleteNode(self, node):
        &amp;quot;&amp;quot;&amp;quot;
        :type node: ListNode
        :rtype: void Do not return anything, modify node in-place instead.
        &amp;quot;&amp;quot;&amp;quot;
        node.val = node.next.val
        node.next = node.next.next
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;
&lt;p&gt;删除当前节点 必须知道prev节点， 这里只能访问当前节点，就只能先将next节点的值赋值给当前结点, 再把next节点干掉&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/%E9%93%BE%E8%A1%A8/">链表</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/leetcode/">leetcode</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>0206 回文链表</title>
                <link>https://affectalways.github.io/posts/leetcode/%E9%93%BE%E8%A1%A8/0206%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/leetcode/%E9%93%BE%E8%A1%A8/0206%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</guid>
                <pubDate>Wed, 15 Jul 2020 21:20:33 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h4 id=&#34;面试题-0206-回文链表httpsleetcode-cncomproblemspalindrome-linked-list-lcci&#34;&gt;面试题 02.06. 回文链表](&lt;a href=&#34;https://leetcode-cn.com/problems/palindrome-linked-list-lcci/&#34;&gt;https://leetcode-cn.com/problems/palindrome-linked-list-lcci/&lt;/a&gt;)&lt;/h4&gt;
&lt;p&gt;编写一个函数，检查输入的链表是否是回文的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入： 1-&amp;gt;2
输出： false 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入： 1-&amp;gt;2-&amp;gt;2-&amp;gt;1
输出： true 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;进阶：&lt;/strong&gt;
你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 快慢指针遍历到链表中间，快指针走两步、慢指针走一步，最后慢指针的位置就是链表中间（画个示例图就知道了，虽然我这看的是该题的评论，不太明白，然后画了个图就了解了）
2. 从中间开始反转链表后半段
3. 从原链表头和反转后的链表头开始比较 value
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# -*- coding: utf-8 -*-
# @Time     : 2020/7/15 21:27
# @Author   : affectalways
# @Site     : 
# @Contact  : affectalways@gmail.com
# @File     : 0206.py
# @Software : PyCharm 

class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None


class Solution(object):
    def get_middle(self, head):
        &amp;quot;&amp;quot;&amp;quot;用快慢指针获取中间节点&amp;quot;&amp;quot;&amp;quot;
        left = right = head
        while right and right.next:
            left = left.next
            right = right.next.next
        return left

    def reverse_link(self, head):
        &amp;quot;&amp;quot;&amp;quot;反转链表&amp;quot;&amp;quot;&amp;quot;
        cur = head
        pre = None
        while cur:
            after = cur.next
            cur.next = pre
            pre = cur
            cur = after
        return pre

    def isPalindrome(self, head):
        &amp;quot;&amp;quot;&amp;quot;
        :type head: ListNode
        :rtype: bool
        &amp;quot;&amp;quot;&amp;quot;
        if head is None:
            return True
        # 获取中间节点
        middle_node = self.get_middle(head)

        # 反转链表
        first = head
        second = self.reverse_link(middle_node)
        while second:
            if first.val != second.val:
                return False
            first = first.next
            second = second.next
        return True


def create_link(tmp):
    head = None
    cur = head
    for val in tmp:
        node = ListNode(val)
        if head is None:
            head = node
            cur = head
        else:
            cur.next = node
            cur = cur.next
    return head


def traversal_link(head):
    while head:
        print(head.val)
        head = head.next


if __name__ == &#39;__main__&#39;:
    head = create_link([1, 1, 1, 1])
    # traversal_link(head)
    solution = Solution()
    result = solution.isPalindrome(head)
    print(result)

&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/%E9%93%BE%E8%A1%A8/">链表</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/leetcode/">leetcode</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Werkzeug 源码解析(1)</title>
                <link>https://affectalways.github.io/posts/werkzeug/werkzeug_sc_1/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/werkzeug/werkzeug_sc_1/</guid>
                <pubDate>Tue, 23 Jun 2020 23:08:16 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h1 id=&#34;werkzeug是什么&#34;&gt;Werkzeug是什么？&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Werkzeug&lt;/code&gt;是一个基于&lt;a href=&#34;https://affectalways.github.io/posts/wsgi/wsgi_kl_1/&#34;&gt;WSGI&lt;/a&gt;的Web应用框架（说框架可能不合理，&lt;a href=&#34;https://werkzeug.palletsprojects.com/en/1.0.x/&#34;&gt;官方文档&lt;/a&gt;给出的是&lt;code&gt;应用程序库&lt;/code&gt;）。想要了解更多请看&lt;a href=&#34;https://werkzeug.palletsprojects.com/en/1.0.x/&#34;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;为什么要了解werkzeug&#34;&gt;为什么要了解Werkzeug？&lt;/h1&gt;
&lt;p&gt;因为目前所用的web框架为Flask，而Flask是以Werkzeug为基础的，所以绕不开Werkzeug了。&lt;/p&gt;
&lt;h1 id=&#34;基础知识&#34;&gt;基础知识&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://affectalways.github.io/posts/wsgi/wsgi_kl_1/&#34;&gt;WSGI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;生成器&lt;/li&gt;
&lt;li&gt;非常简单的网络知识&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/python/">python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/werkzeug/">werkzeug</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/flask/">flask</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/python/">python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/werkzeug/">werkzeug</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Werkzeug 源码解析(2)</title>
                <link>https://affectalways.github.io/posts/werkzeug/werkzeug_sc_2/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/werkzeug/werkzeug_sc_2/</guid>
                <pubDate>Tue, 23 Jun 2020 23:08:16 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h1 id=&#34;从哪开始呢&#34;&gt;从哪开始呢？&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;熟悉目录层级&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参照&lt;a href=&#34;https://werkzeug.palletsprojects.com/en/1.0.x/&#34;&gt;Werkzeug&lt;/a&gt;官方文档给出的&lt;a href=&#34;https://werkzeug.palletsprojects.com/en/1.0.x/tutorial/#introducing-shortly&#34;&gt;示例&lt;/a&gt;，重点关注&lt;code&gt;Request&lt;/code&gt;,&lt;code&gt;Response&lt;/code&gt;,&lt;code&gt;run_simple&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;werkzeug.wrappers&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Response&lt;/span&gt;
   
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;application&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start_response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;!&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;World&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mimetype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start_response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   
   
   
&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; 省略超多内容
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Shortly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
   
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;redis&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;redis&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Redis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;redis_host&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;redis_port&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
   
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;dispatch_request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;wsgi_app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start_response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dispatch_request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start_response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__call__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start_response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wsgi_app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start_response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   
   
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;create_app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;redis_host&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;redis_port&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6379&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;with_static&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Shortly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
        &lt;span class=&#34;s1&#34;&gt;&amp;#39;redis_host&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;       &lt;span class=&#34;n&#34;&gt;redis_host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s1&#34;&gt;&amp;#39;redis_port&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;       &lt;span class=&#34;n&#34;&gt;redis_port&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;with_static&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wsgi_app&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SharedDataMiddleware&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wsgi_app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;s1&#34;&gt;&amp;#39;/static&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dirname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;__file__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;
   
   
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;werkzeug.serving&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;run_simple&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;create_app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;run_simple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;use_debugger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;use_reloader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;requestresponserun_simple最不重要的&#34;&gt;Request、Response、run_simple（最不重要的）&lt;/h1&gt;
&lt;p&gt;之后的文章就重点关注以上三个，而且肯定会延伸到Werkzeug的其他地方（源码），不必担心，肯定会有所涉猎。&lt;/p&gt;
&lt;p&gt;讲真，感觉run_simple可以不重点关注，希望不要打脸&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/python/">python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/werkzeug/">werkzeug</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/flask/">flask</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/python/">python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/werkzeug/">werkzeug</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Werkzeug 源码解析(3)</title>
                <link>https://affectalways.github.io/posts/werkzeug/werkzeug_sc_3/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/werkzeug/werkzeug_sc_3/</guid>
                <pubDate>Tue, 23 Jun 2020 23:08:16 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h1 id=&#34;werkzeug-request-源码解析&#34;&gt;Werkzeug Request 源码解析&lt;/h1&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from werkzeug.wrappers import Request, Response

def application(environ, start_response):
    request = Request(environ)
    text = &#39;Hello %s!&#39; % request.args.get(&#39;name&#39;, &#39;World&#39;)
    response = Response(text, mimetype=&#39;text/plain&#39;)
    return response(environ, start_response)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请注意，之后&lt;code&gt;Request&lt;/code&gt;和&lt;code&gt;Response&lt;/code&gt;的相关源码都会围绕&lt;code&gt;Werkzeug&lt;/code&gt;给出的以上代码讲解。&lt;/p&gt;
&lt;h1 id=&#34;request-类&#34;&gt;Request 类&lt;/h1&gt;
&lt;h3 id=&#34;文件定位&#34;&gt;文件定位&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;src/werkzeug/wrappers/request.py&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;作用&#34;&gt;作用&lt;/h3&gt;
&lt;p&gt;根据&lt;code&gt;Request&lt;/code&gt;类的名称其实就可以知道，&lt;code&gt;Request&lt;/code&gt;类是处理请求的，实际上，通过阅读相关代码，&lt;code&gt;Request&lt;/code&gt;类的作用确实如此&lt;/p&gt;
&lt;h3 id=&#34;分析&#34;&gt;分析&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;BaseRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;AcceptMixin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ETagRequestMixin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;UserAgentMixin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;AuthorizationMixin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;CORSRequestMixin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;CommonRequestDescriptorsMixin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Full featured request object implementing the following mixins:
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    -   :class:`AcceptMixin` for accept header parsing
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    -   :class:`ETagRequestMixin` for etag and cache control handling
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    -   :class:`UserAgentMixin` for user agent introspection
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    -   :class:`AuthorizationMixin` for http auth handling
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    -   :class:`~werkzeug.wrappers.cors.CORSRequestMixin` for Cross
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        Origin Resource Sharing headers
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    -   :class:`CommonRequestDescriptorsMixin` for common headers
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	根据注释可知，除了&lt;code&gt;BaseRequest&lt;/code&gt;类之外，其他的&lt;code&gt;Mixin&lt;/code&gt;类都是作为添加&lt;code&gt;高级方法&lt;/code&gt;的类。而且&lt;code&gt;Request&lt;/code&gt;类也没有&lt;code&gt;初始化&lt;/code&gt;方法，所以可以将注意力从&lt;code&gt;Request&lt;/code&gt;转移到&lt;code&gt;BaseRequest&lt;/code&gt;类上面。&lt;/p&gt;
&lt;h1 id=&#34;baserequest-类&#34;&gt;BaseRequest 类&lt;/h1&gt;
&lt;p&gt;截取以上代码示例的代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;request = Request(environ)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;调用父类&lt;code&gt;BaseRequest&lt;/code&gt;的&lt;code&gt;__init__&lt;/code&gt;方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;populate_request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shallow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;populate_request&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shallow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;werkzeug.request&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shallow&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shallow&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/python/">python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/werkzeug/">werkzeug</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/flask/">flask</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/python/">python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/werkzeug/">werkzeug</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>单例模式</title>
                <link>https://affectalways.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
                <pubDate>Mon, 22 Jun 2020 22:28:03 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/">设计模式</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/python/">python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/">设计模式</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Gunicorn 源码解析(1)</title>
                <link>https://affectalways.github.io/posts/gunicorn/gunicorn_source_code_1/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/gunicorn/gunicorn_source_code_1/</guid>
                <pubDate>Sat, 20 Jun 2020 11:29:06 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/python/">python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/gunicorn/">gunicorn</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/python/">python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/server/">server</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/gunicorn/">gunicorn</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Celery 源码解析（1）</title>
                <link>https://affectalways.github.io/posts/celery/celery_source_code_1/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/celery/celery_source_code_1/</guid>
                <pubDate>Sat, 20 Jun 2020 11:24:01 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/celery/">celery</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/python/">python</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Flask 源码解析（1）</title>
                <link>https://affectalways.github.io/posts/flask/flask_source_code_1/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/flask/flask_source_code_1/</guid>
                <pubDate>Sat, 20 Jun 2020 11:24:01 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/python/">python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/flask/">flask</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/flask/">flask</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/python/">python</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Flask 源码解析（2）</title>
                <link>https://affectalways.github.io/posts/flask/flask_source_code_2/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/flask/flask_source_code_2/</guid>
                <pubDate>Sat, 20 Jun 2020 11:24:01 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/python/">python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/flask/">flask</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/flask/">flask</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/python/">python</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Flask 源码解析（3）</title>
                <link>https://affectalways.github.io/posts/flask/flask_source_code_3/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/flask/flask_source_code_3/</guid>
                <pubDate>Sat, 20 Jun 2020 11:24:01 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/python/">python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/flask/">flask</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/flask/">flask</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/python/">python</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Flask 源码解析（4）</title>
                <link>https://affectalways.github.io/posts/flask/flask_source_code_4/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/flask/flask_source_code_4/</guid>
                <pubDate>Sat, 20 Jun 2020 11:24:01 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/python/">python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/flask/">flask</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/flask/">flask</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/python/">python</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Flask 源码解析（5）</title>
                <link>https://affectalways.github.io/posts/flask/flask_source_code_5/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/flask/flask_source_code_5/</guid>
                <pubDate>Sat, 20 Jun 2020 11:24:01 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/python/">python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/flask/">flask</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/flask/">flask</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/python/">python</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Flask 源码解析（6）</title>
                <link>https://affectalways.github.io/posts/flask/flask_source_code_6/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/flask/flask_source_code_6/</guid>
                <pubDate>Sat, 20 Jun 2020 11:24:01 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/python/">python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/flask/">flask</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/flask/">flask</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/python/">python</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>requests 源码解析（1）</title>
                <link>https://affectalways.github.io/posts/requests/requests_source_code_1/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/requests/requests_source_code_1/</guid>
                <pubDate>Sat, 20 Jun 2020 11:24:01 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/python/">python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/requests/">requests</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/requests/">requests</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/python/">python</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>WSGI 理解（1）</title>
                <link>https://affectalways.github.io/posts/wsgi/wsgi_kl_1/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/wsgi/wsgi_kl_1/</guid>
                <pubDate>Sat, 20 Jun 2020 11:24:01 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h2 id=&#34;wsgi-是个什么东西&#34;&gt;WSGI 是个什么东西？&lt;/h2&gt;
&lt;p&gt;实际的生产环境中，Python应用程序是放在服务器的http server（比如Apache、Nginx等）上的。现在的问题是http server（之后以服务器代称）怎么把接收到的请求传递给Python应用程序？这就是WSGI做的事情。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WSGI（Web Server Gateway Interface）&lt;/code&gt;即Web服务器网关接口，解耦了&lt;code&gt;服务器（Apache、Nginx等）&lt;/code&gt;和&lt;code&gt;Python应用程序&lt;/code&gt;，是Python开发者只需要关注Python应用程序的开发。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Web Server：即HTTP Server，接收用户的请求并返回响应信息；分为以下两部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务器，如Apache、Nginx等&lt;/li&gt;
&lt;li&gt;Python应用程序，负责处理业务逻辑&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/wsgi/wsgi_1/wsgi_1_framework.png?raw=true&#34; alt=&#34;wsgi_framework.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/wsgi/wsgi_1/wsgi_1_wsgi.png?raw=true&#34; alt=&#34;wsgi.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;http-server-实现&#34;&gt;HTTP Server 实现&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;服务器&lt;/code&gt;每接收到一个请求就调用一次&lt;code&gt;Python Application&lt;/code&gt;。&lt;code&gt;服务器&lt;/code&gt;作用如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收HTTP请求&lt;/li&gt;
&lt;li&gt;提供&lt;code&gt;environ&lt;/code&gt;和回调函数&lt;code&gt;start_response&lt;/code&gt;，并传给&lt;code&gt;callable object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;callable object&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是&lt;a href=&#34;https://www.python.org/dev/peps/pep-3333/#the-application-framework-side&#34;&gt;PEP-3333&lt;/a&gt;提供的示例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import os, sys

enc, esc = sys.getfilesystemencoding(), &#39;surrogateescape&#39;

def unicode_to_wsgi(u):
    # Convert an environment variable to a WSGI &amp;quot;bytes-as-unicode&amp;quot; string
    return u.encode(enc, esc).decode(&#39;iso-8859-1&#39;)

def wsgi_to_bytes(s):
    return s.encode(&#39;iso-8859-1&#39;)


def run_with_cgi(application):
	&amp;quot;&amp;quot;&amp;quot;
		application: 是Python Application中的callable object
	&amp;quot;&amp;quot;&amp;quot;
    # 构造environ变量，dict类型，里面的内容是一次HTTP请求的环境变量
    environ = {k: unicode_to_wsgi(v) for k,v in os.environ.items()}
    environ[&#39;wsgi.input&#39;]        = sys.stdin.buffer
    environ[&#39;wsgi.errors&#39;]       = sys.stderr
    environ[&#39;wsgi.version&#39;]      = (1, 0)
    environ[&#39;wsgi.multithread&#39;]  = False
    environ[&#39;wsgi.multiprocess&#39;] = True
    environ[&#39;wsgi.run_once&#39;]     = True

    if environ.get(&#39;HTTPS&#39;, &#39;off&#39;) in (&#39;on&#39;, &#39;1&#39;):
        environ[&#39;wsgi.url_scheme&#39;] = &#39;https&#39;
    else:
        environ[&#39;wsgi.url_scheme&#39;] = &#39;http&#39;

    headers_set = []
    headers_sent = []

    # 把响应信息写到终端
    def write(data):
        out = sys.stdout.buffer

        if not headers_set:
             raise AssertionError(&amp;quot;write() before start_response()&amp;quot;)

        elif not headers_sent:
             # Before the first output, send the stored headers
             status, response_headers = headers_sent[:] = headers_set
             out.write(wsgi_to_bytes(&#39;Status: %s\r\n&#39; % status))
             for header in response_headers:
                 out.write(wsgi_to_bytes(&#39;%s: %s\r\n&#39; % header))
             out.write(wsgi_to_bytes(&#39;\r\n&#39;))

        out.write(data)
        out.flush()

    # 定义start_response回调函数
    def start_response(status, response_headers, exc_info=None):
        if exc_info:
            try:
                if headers_sent:
                    # Re-raise original exception if headers sent
                    raise exc_info[1].with_traceback(exc_info[2])
            finally:
                exc_info = None     # avoid dangling circular ref
        elif headers_set:
            raise AssertionError(&amp;quot;Headers already set!&amp;quot;)

        headers_set[:] = [status, response_headers]

        # Note: error checking on the headers should happen here,
        # *after* the headers are set.  That way, if an error
        # occurs, start_response can only be re-called with
        # exc_info set.

        return write

    result = application(environ, start_response)
    try:
        # 处理application返回的结果（可迭代）
        for data in result:
            if data:    # don&#39;t send headers until body appears
                write(data)
        if not headers_sent:
            write(&#39;&#39;)   # send headers now if body was empty
    finally:
        if hasattr(result, &#39;close&#39;):
            result.close()
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;中间件middleware&#34;&gt;中间件Middleware&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Middlerware&lt;/code&gt;是位于&lt;code&gt;Http Server&lt;/code&gt;和&lt;code&gt;Python Application&lt;/code&gt;之间的功能组件。&lt;/p&gt;
&lt;p&gt;对于&lt;code&gt;Http Server&lt;/code&gt;而言，&lt;code&gt;Middlerware&lt;/code&gt;就是应用程序；对于&lt;code&gt;Python Application&lt;/code&gt;而言，&lt;code&gt;Middlerware&lt;/code&gt;就是&lt;code&gt;Http Server&lt;/code&gt;。&lt;code&gt;Middleware&lt;/code&gt;对&lt;code&gt;Http Server&lt;/code&gt;和&lt;code&gt;Python Application&lt;/code&gt;是透明的，把从&lt;code&gt;Http Server&lt;/code&gt;接收到的请求进行处理并向后传递，一直传递给&lt;code&gt;Python Application&lt;/code&gt;，最后把&lt;code&gt;Python Application&lt;/code&gt;的处理结果返回给&lt;code&gt;Http Server&lt;/code&gt;。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/wsgi/wsgi_1/wsgiframeworkmiddleware.png?raw=true&#34; alt=&#34;wsgi_middlerware.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Middlerware&lt;/code&gt;组件可执行以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据 url 把用户请求调度到不同的 Python Application 中。&lt;/li&gt;
&lt;li&gt;负载均衡，转发用户请求&lt;/li&gt;
&lt;li&gt;预处理 XSL 等相关数据&lt;/li&gt;
&lt;li&gt;限制请求速率，设置白名单&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：WSGI 的 middleware 体现了 unix 的哲学之一：do one thing and do it well。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本例实现了一个关于异常处理的 middleware（&lt;a href=&#34;https://lucumr.pocoo.org/2007/5/21/getting-started-with-wsgi/&#34;&gt;摘自&lt;/a&gt;）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from sys import exc_info
from traceback import format_tb

class ExceptionMiddleware(object):
    &amp;quot;&amp;quot;&amp;quot;The middleware we use.&amp;quot;&amp;quot;&amp;quot;

    def __init__(self, app):
        self.app = app

    def __call__(self, environ, start_response):
        &amp;quot;&amp;quot;&amp;quot;Call the application can catch exceptions.&amp;quot;&amp;quot;&amp;quot;
        appiter = None
        # just call the application and send the output back
        # unchanged but catch exceptions
        try:
            appiter = self.app(environ, start_response)
            for item in appiter:
                yield item
        # if an exception occours we get the exception information
        # and prepare a traceback we can render
        except:
            e_type, e_value, tb = exc_info()
            traceback = [&#39;Traceback (most recent call last):&#39;]
            traceback += format_tb(tb)
            traceback.append(&#39;%s: %s&#39; % (e_type.__name__, e_value))
            # we might have not a stated response by now. try
            # to start one with the status code 500 or ignore an
            # raised exception if the application already started one.
            try:
                start_response(&#39;500 INTERNAL SERVER ERROR&#39;, [
                               (&#39;Content-Type&#39;, &#39;text/plain&#39;)])
            except:
                pass
            yield &#39;\n&#39;.join(traceback)

        # wsgi applications might have a close function. If it exists
        # it *must* be called.
        if hasattr(appiter, &#39;close&#39;):
            appiter.close()
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;python-application&#34;&gt;Python Application&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Python Application&lt;/code&gt;端必须定义一个 &lt;code&gt;callable object&lt;/code&gt;，&lt;code&gt;callable object&lt;/code&gt; 可以是以下三者之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;function/method&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;instance with a __call__ method&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;callable object&lt;/code&gt;必须满足以下两个条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收两个参数：environ（字典，WSGI的环境信息）、start_response（响应请求的函数, 返回HTTP status、headers给server）&lt;/li&gt;
&lt;li&gt;返回一个可迭代的值（iterable）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;重点内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;environ&lt;/code&gt;和&lt;code&gt;start_response&lt;/code&gt;由&lt;code&gt;http server&lt;/code&gt;提供并实现&lt;/li&gt;
&lt;li&gt;&lt;code&gt;environ&lt;/code&gt;变量是包含环境变量的字典&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Python Application&lt;/code&gt;内部在返回前调用&lt;code&gt;start_response&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start_response&lt;/code&gt;也是一个callable，接收两个必要的参数，&lt;code&gt;status&lt;/code&gt;和&lt;code&gt;response_headers&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;callable-object代码实现&#34;&gt;callable object代码实现&lt;/h4&gt;
&lt;h5 id=&#34;1functionmethod&#34;&gt;1.function/method&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;def application(environ, start_response):
	# 调用服务器程序提供的 start_response，填入两个参数
	start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text/json&#39;)])
	return []
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;2class&#34;&gt;2.class&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;class ApplicationClass(object):
	def __init__(self, environ, start_response):
		self.environ = environ
		self.start_response = start_response
	
	def __iter__(self):
		self.start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text/json&#39;)])
		yield &amp;quot;随便&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;使用方式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for result in ApplicationClass(environ, start_response):
    do_somthing(result)
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h5 id=&#34;3instance-with-a-__call__-method&#34;&gt;3.instance with a &lt;strong&gt;call&lt;/strong&gt; method&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;class ApplicationClass(object):
	def __init__(self):
		pass
		
	def __call__(self, environ, start_response):
		start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text/json&#39;)])
		yield &amp;quot;anything&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;使用方式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;app = ApplicationClass()
for result in app(environ, start_response):
	do_something(result)
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;参考链接&#34;&gt;参考链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.python.org/dev/peps/pep-3333/#the-application-framework-side&#34;&gt;PEP-3333&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://lucumr.pocoo.org/2007/5/21/getting-started-with-wsgi/&#34;&gt;巨佬&lt;/a&gt;&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/python/">python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/wsgi/">WSGI</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/flask/">flask</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/python/">python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/wsgi/">wsgi</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Hugo 添加评论功能</title>
                <link>https://affectalways.github.io/posts/hugo/hugo_comment/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/hugo/hugo_comment/</guid>
                <pubDate>Wed, 17 Jun 2020 21:48:44 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h1 id=&#34;不能评论&#34;&gt;不能评论!&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; 是一个强大的静态网页生成器，使用 go 开发，速度贼快。不过 Hugo 还比较年轻，没有像 &lt;a href=&#34;https://theme-next.iissnan.com/&#34;&gt;NexT&lt;/a&gt; 那样功能强大，成熟稳定的主题。所以很多东西需要自己动手撸。&lt;/p&gt;
&lt;p&gt;比如评论系统。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;评论系统排名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;valine &amp;gt; gitalk &amp;gt; gitment &amp;gt; livere &amp;gt; 畅言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;关于valine&#34;&gt;关于Valine&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/hugo/hugo_comment/valine.png?raw=true&#34; alt=&#34;valine.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;官方网址： &amp;laquo;&lt;a href=&#34;https://valine.js.org/%3E%3E&#34;&gt;https://valine.js.org/&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其特性不一一赘述，官方网址有介绍&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;添加评论区&#34;&gt;添加评论区&lt;/h2&gt;
&lt;p&gt;目前博客使用的主题是meme&lt;/p&gt;
&lt;p&gt;不同的主题可能有所区别，但原理大都类似&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&#34;原理&#34;&gt;原理？&lt;/h3&gt;
&lt;p&gt;Hugo 会将 &lt;strong&gt;Markdown 文档&lt;/strong&gt; 按照 &lt;strong&gt;主题 (包括 HTML 模板、CSS、JavaScript 等)&lt;/strong&gt; 编译成静态网页&lt;/p&gt;
&lt;p&gt;那么我们只需要将 &lt;code&gt;Valine&lt;/code&gt;作为一个 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 插入到 HTML 模板中，然后在 &lt;code&gt;config.toml&lt;/code&gt; 中添加相关配置，就可以添加&lt;code&gt;评论区&lt;/code&gt;了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;leancloud相关配置&#34;&gt;Leancloud相关配置&lt;/h2&gt;
&lt;p&gt;评论系统依赖于&lt;code&gt;leancloud&lt;/code&gt;，所以需要先在&lt;code&gt;leancloud&lt;/code&gt;中进行相关的准备工作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://leancloud.cn/dashboard/login.html#/signin&#34;&gt;登录&lt;/a&gt; 或 &lt;a href=&#34;https://leancloud.cn/dashboard/login.html#/signup&#34;&gt;注册&lt;/a&gt; LeanCloud&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登录成功后，进入后台点击左上角的创建应用：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/hugo/hugo_comment/leancloud.png?raw=true&#34; alt=&#34;leancloud.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建好应用，进入应用，左边栏找到 &lt;strong&gt;设置&lt;/strong&gt; ，然后点击 &lt;strong&gt;应用Key&lt;/strong&gt;，此时记录出现的 &lt;strong&gt;App ID&lt;/strong&gt; 和 &lt;strong&gt;App Key&lt;/strong&gt;，后面配置文件中会用到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/hugo/hugo_comment/leancloud_key.png?raw=true&#34; alt=&#34;lc_key.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为评论和文章阅读数统计依赖于存储，所以还需要建立两个新的存储 &lt;code&gt;Class&lt;/code&gt;，左边栏找到并点击 &lt;strong&gt;存储&lt;/strong&gt;，点击 &lt;strong&gt;创建Class&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/hugo/hugo_comment/leancloud_class.png?raw=true&#34; alt=&#34;lc_class.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建两个存储Class，分别命名为: &lt;code&gt;Counter&lt;/code&gt; 和 &lt;code&gt;Comment&lt;/code&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;还需要为应用添加安全域名，左边栏点击 &lt;strong&gt;设置&lt;/strong&gt;，找到 &lt;strong&gt;安全中心&lt;/strong&gt;，点击后会看到 &lt;strong&gt;安全域名&lt;/strong&gt; 设置框，输入博客使用的域名，点击保存即可：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/hugo/hugo_comment/leancloud_safe.png?raw=true&#34; alt=&#34;lc_safe.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;configtoml开启comment&#34;&gt;config.toml开启comment&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;将&lt;code&gt;enableComments = false&lt;/code&gt;设置为&lt;code&gt;enableComments = true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;enableValine = false&lt;/code&gt;设置为&lt;code&gt;enableValine = true&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;添加 &lt;strong&gt;Valine&lt;/strong&gt; 参数项：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;## Valine
    enableValine = true
    valineAppId = &amp;quot;************&amp;quot;
    valineAppKey = &amp;quot;*****************&amp;quot;
    valinePlaceholder = &amp;quot;Just go go&amp;quot;
    valinePath = &amp;quot;&amp;quot;
    valineAvatar = &amp;quot;mm&amp;quot;
    valineMeta = [&amp;quot;nick&amp;quot;, &amp;quot;mail&amp;quot;, &amp;quot;link&amp;quot;]
    valinePageSize = 10
    valineLang = &amp;quot;zh-cn&amp;quot;
    valineVisitor = false
    valineHighlight = true
    valineAvatarForce = false
    valineRecordIP = false
    valineServerURLs = &amp;quot;&amp;quot;
    valineEmojiCDN = &amp;quot;&amp;quot;
    valineEmojiMaps = {}
    valineEnableQQ = false
    valineRequiredFields = []
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面几项内容的含义，这里简单一说，具体还是要看 &lt;a href=&#34;https://valine.js.org/configuration.html&#34;&gt;Valine官网中配置相关的内容&lt;/a&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;enable&lt;/td&gt;
&lt;td&gt;这是用于主题中配置的，不是官方Valine的参数，&lt;strong&gt;true&lt;/strong&gt;时控制开启此评论系统&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;appId&lt;/td&gt;
&lt;td&gt;这是在 &lt;a href=&#34;https://leancloud.cn/&#34;&gt;leancloud&lt;/a&gt; 后台应用中获取的，也就是上面提到的 &lt;strong&gt;App ID&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;appKey&lt;/td&gt;
&lt;td&gt;这是在 &lt;a href=&#34;https://leancloud.cn/&#34;&gt;leancloud&lt;/a&gt; 后台应用中获取的，也就是上面提到的 &lt;strong&gt;App Key&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;notify&lt;/td&gt;
&lt;td&gt;用于控制是否开启邮件通知功能，具体参考&lt;a href=&#34;https://github.com/xCss/Valine/wiki/Valine-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E9%82%AE%E4%BB%B6%E6%8F%90%E9%86%92%E8%AE%BE%E7%BD%AE&#34;&gt;邮件提醒配置&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;verify&lt;/td&gt;
&lt;td&gt;用于控制是否开启评论验证码功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;avatar&lt;/td&gt;
&lt;td&gt;用于配置评论项中用户头像样式，有多种选择：mm, identicon, monsterid, wavatar, retro, hide。详细参考：&lt;a href=&#34;https://valine.js.org/avatar.html&#34;&gt;头像配置&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;placehoder&lt;/td&gt;
&lt;td&gt;评论框的提示符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;visitor&lt;/td&gt;
&lt;td&gt;控制是否开启文章阅读数的统计功能i, 详情阅读&lt;a href=&#34;https://valine.js.org/visitor.html&#34;&gt;文章阅读数统计&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;修改主题文件&#34;&gt;修改主题文件&lt;/h3&gt;
&lt;p&gt;主要是修改主题中评论相关的布局文件 &lt;code&gt;themes\meme\layouts\partials\components\comments.html&lt;/code&gt;，按照 &lt;a href=&#34;https://valine.js.org/quickstart.html&#34;&gt;Valine快速开始&lt;/a&gt; 添加 &lt;strong&gt;Valine&lt;/strong&gt; 相关代码，找到以下位置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ if .Site.Params.enableValine }}
{{- end }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;添加的 &lt;strong&gt;Valine&lt;/strong&gt; 评论的代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ if .Site.Params.enableValine }}
            &amp;lt;div id=&amp;quot;vcomments&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
			&amp;lt;script src=&amp;quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
			  &amp;lt;script src=&#39;//unpkg.com/valine/dist/Valine.min.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
			  &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
				new Valine({
					el: &#39;#vcomments&#39; ,
					appId: &#39;{{ .Site.Params.valineAppId }}&#39;,
					appKey: &#39;{{ .Site.Params.valineAppKey }}&#39;,
					notify: &#39;{{ .Site.Params.valineNotify }}&#39;, 
					verify: &#39;{{ .Site.Params.valineVerify }}&#39;, 
					avatar:&#39;{{ .Site.Params.valineAvatar }}&#39;, 
					placeholder: &#39;{{ .Site.Params.valinePlaceholder }}&#39;,
					visitor: &#39;{{ .Site.Params.valineVisitor }}&#39;
				});
			  &amp;lt;/script&amp;gt;
        {{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到上述代码中引用了配置文件中的相关参数，这样以后修改配置就不用修改代码了，只需要改配置文件 &lt;code&gt;config.toml&lt;/code&gt;。&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/blog/">blog</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/hugo/">hugo</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/hugo/">hugo</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Hugo 让 GitHub Pages被索引到</title>
                <link>https://affectalways.github.io/posts/hugo/hugo_seo/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/hugo/hugo_seo/</guid>
                <pubDate>Wed, 17 Jun 2020 21:00:29 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h2 id=&#34;居然都找不到&#34;&gt;居然都找不到！&lt;/h2&gt;
&lt;p&gt;其实Blog我主要是用来做一些记录，突然看到有博客提到GitHub Pages屏蔽了百度的爬虫，所以百度是搜索不到GitHub Pages上的网页的。&lt;/p&gt;
&lt;p&gt;什么？所以百度搜索搜不到我的个人博客？不死心，尝试一下，找得到github、gist主页，但是就是找不到github.io后缀的网页。除了百度之外，我还尝试了Bing、Google，都没有。&lt;/p&gt;
&lt;h2 id=&#34;如何让搜索引擎索引到呢&#34;&gt;如何让搜索引擎索引到呢？&lt;/h2&gt;
&lt;p&gt;发现流行的搜索引擎居然都找不到博客，那就需要赶紧找解决方法。Google和Bing还不清楚是怎么回事，但网上流传的email回复内容都点明了Github Pages禁止了百度爬虫的爬去，似乎原因是百度爬虫爬得太过于频繁，会严重影响服务器性能。针对百度爬虫的问题，大家找了很多方法。自建服务器托管博客、将博客放在Gitlab上或者CDN方法都不在我的选择范围内，因为暂时我还没有购买服务器或者域名的打算，所以决定放弃百度……但不管怎么样Bing和Google还是要设置好的！&lt;/p&gt;
&lt;h3 id=&#34;google&#34;&gt;Google&lt;/h3&gt;
&lt;h4 id=&#34;添加资源&#34;&gt;添加资源&lt;/h4&gt;
&lt;p&gt;在google搜索页面输入“site:affectalways.github.io”就可以看到这个网页是否被google索引到，如果没被索引到，在搜索结果页面就会直接提示你使用&lt;a href=&#34;https://search.google.com/search-console?utm_source=about-page&amp;amp;resource_id=https://affectalways.github.io/&#34;&gt;Google Search Console&lt;/a&gt;。登录后，如果是首次使用在Search Console中以下界面中选择“网页”类型资源，并将博客完整url填入其中，我填入“https://affectalways.github.io”。注意http或者https，www等最好能完全正确。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/hugo/hugo_seo/hugo_seo_1.png?raw=true&#34; alt=&#34;hugo_seo_1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果已经添加过资源，则需要点击左上角的按钮，然后和上面一样地添加资源即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/hugo/hugo_seo/hugo_seo_2.png?raw=true&#34; alt=&#34;hugo_seo_2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;资源添加后，需要验证你对该网站有所有权。Google提供了几种方法，我选择了三种方式：&lt;/p&gt;
&lt;h5 id=&#34;html验证文件上传&#34;&gt;HTML验证文件上传&lt;/h5&gt;
&lt;p&gt;只需要根据要求，下载HTML验证文件，把文件放在站点根目录的static目录下（以本网站为例：affectalways/static）&lt;/p&gt;
&lt;h5 id=&#34;html标记&#34;&gt;HTML标记&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;config.toml&lt;/code&gt;中的&lt;code&gt;googleSiteVerification = &amp;quot;&amp;quot;&lt;/code&gt; 设置为 &lt;code&gt;googleSiteVerification = 不为空&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;找到&lt;code&gt;themes/meme/layouts/partials/head.html&lt;/code&gt;中的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{- with .Site.Params.googleSiteVerification }}

        &amp;lt;meta name=&amp;quot;google-site-verification&amp;quot; content=&amp;quot;&amp;quot; /&amp;gt;

{{- end }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;把&lt;code&gt;content&lt;/code&gt;内容改为给定的内容，然后执行&lt;code&gt;hugo&lt;/code&gt;命令，就可以验证了&lt;/p&gt;
&lt;h5 id=&#34;google-analytics&#34;&gt;Google Analytics&lt;/h5&gt;
&lt;p&gt;先到&lt;a href=&#34;https://marketingplatform.google.com/about/analytics/&#34;&gt;Google Analytics&lt;/a&gt;创建一个账号，并登录。&lt;/p&gt;
&lt;p&gt;新建一个资源，填完后获得&lt;code&gt;tracking code&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;更新&lt;code&gt;config.toml&lt;/code&gt;文件，把&lt;code&gt;enableGoogleAnalytics&lt;/code&gt;设为&lt;code&gt;true&lt;/code&gt;，&lt;code&gt;trackingCodeType&lt;/code&gt;设为&lt;code&gt;gtag&lt;/code&gt;（两个选择gtag和analytics，因为affectalways.github.io使用的是&lt;code&gt;Google Analytics给定的gtag.js&lt;/code&gt;，所以设置为gtag），&lt;code&gt;trackingID&lt;/code&gt;设为获取到的&lt;code&gt;tracking code&lt;/code&gt;。然后执行&lt;code&gt;hugo&lt;/code&gt;命令，就可以验证了。&lt;/p&gt;
&lt;h4 id=&#34;站点地图&#34;&gt;站点地图&lt;/h4&gt;
&lt;p&gt;在左侧点击“站点地图”，并在右侧点添加/测试站点地图，并添加url，我的是&lt;code&gt;https://affectalways.github.io/sitemap.xml&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;bing&#34;&gt;Bing&lt;/h3&gt;
&lt;p&gt;相似地，在&lt;a href=&#34;https://www.bing.com/webmaster/home&#34;&gt;Bing网站管理&lt;/a&gt;登陆、添加网站url。&lt;/p&gt;
&lt;p&gt;然后在左侧点击“配置我的网站&amp;gt;Sitemaps”，并在右侧加上sitemap的url，点击提交。&lt;/p&gt;
&lt;h3 id=&#34;百度不死心的尝试&#34;&gt;百度不死心的尝试&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;不死心的失败了&lt;/p&gt;
&lt;/blockquote&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/blog/">blog</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/hugo/">hugo</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/hugo/">hugo</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Hugo 添加tags等分类</title>
                <link>https://affectalways.github.io/posts/hugo/hugo_tags/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/hugo/hugo_tags/</guid>
                <pubDate>Wed, 17 Jun 2020 20:19:37 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h1 id=&#34;hugo&#34;&gt;Hugo&lt;/h1&gt;
&lt;p&gt;Hugo是支持用户自定义分类的，这个称为taxonomy，可以来对网页内容进行逻辑划分，详情可以在&lt;a href=&#34;https://gohugo.io/content-management/taxonomies/&#34;&gt;这里&lt;/a&gt;查看。&lt;/p&gt;
&lt;p&gt;分类taxonomy有3个概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Taxonomy 分类&lt;/strong&gt;: 可以用来对内容进行分类的类别&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Term 术语&lt;/strong&gt;: 分类的一个键&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Value 值&lt;/strong&gt;: 分配给这个Term的具体内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如我需要增加3个分类，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tag：文章标签&lt;/li&gt;
&lt;li&gt;topic：文章主题/文章系列&lt;/li&gt;
&lt;li&gt;category：文章分类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以tag为例，则对应Taxonomy是tag，Term是具体标签内容比如hugo，Value是打上这个标签的对应网页。&lt;/p&gt;
&lt;h3 id=&#34;配置分类&#34;&gt;配置分类&lt;/h3&gt;
&lt;p&gt;需要在 &lt;code&gt;config.toml&lt;/code&gt; 中增加分类。还是这个例子，则需要增加如下内容：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[taxonomies]
tag = &amp;quot;tags&amp;quot;
category = &amp;quot;categories&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而将每个post的头部也相应增加对应的分类，例如这篇的头部就相应为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;title: &amp;quot;Hugo添加tags等分类&amp;quot;
date: 2020-06-17T20:19:37+08:00
tags: [&amp;quot;hugo&amp;quot;]
draft: true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然实际上，Hugo默认会产生 &lt;code&gt;tags&lt;/code&gt; 和 &lt;code&gt;categories&lt;/code&gt; 的分类，如果只需要这两个，可以不用在 &lt;code&gt;config.toml&lt;/code&gt; 中声明就在post头部使用。&lt;/p&gt;
&lt;h3 id=&#34;分类集合查看&#34;&gt;分类集合查看&lt;/h3&gt;
&lt;p&gt;使用分类taxonomy之后，Hugo会使用分类的模板 (taxonomy templates) 来自动生成一个显示所有分类的term术语的网页以及一个显示该术语的所有value内容列表网页。&lt;/p&gt;
&lt;p&gt;还是以tag为例：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;example.com/tags/&lt;/code&gt; 会列出tags中的所有术语；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;example.com/tags/docker&lt;/code&gt; 会列出tags标为docker的所有网页列表。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;额外知识点：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;keywordsdescription&#34;&gt;keywords、description&lt;/h3&gt;
&lt;p&gt;meta标签的一个很重要的功能就是设置关键字，来帮助你的主页被各大搜索引擎登录，提高网站的访问量。在这个功能中，最重要的就是对Keywords和description的设置。因为按照搜索引擎的工作原理,搜索引擎首先派出机器人自动检索页面中的keywords和decription，并将其加入到自己的数据库，然后再根据关键词的密度将网站排序。因此，我们必须设置好关键字，来提高页面的搜索点击率。使用如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;keywords: 
- hugo
- blog
- 博客
- 建站
description: &amp;quot;Hugo 添加tags等分类&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;keywords需要进行配置：&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;themes\meme\layouts\partials\header.html&lt;/code&gt;的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;header class=&amp;quot;header&amp;quot;{{ if and (eq .Site.Params.headerLayout &amp;quot;flex&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;内部添加&lt;/p&gt;
&lt;meta content=&#34;{{ delimit .Keywords &#34;, &#34; }}&#34; name=&#34;keywords&#34;&gt;
就可以了
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;description是hugo支持的，不需要配置&lt;/p&gt;
&lt;/blockquote&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/blog/">blog</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/hugo/">hugo</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/hugo/">hugo</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Hugo blog（2）</title>
                <link>https://affectalways.github.io/posts/hugo/hugo_install_2/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/hugo/hugo_install_2/</guid>
                <pubDate>Tue, 16 Jun 2020 23:30:53 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;正如上一篇说的，我选择了&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;作为静态网页生成器。为何要放弃Hexo，换成Hugo呢？&lt;/p&gt;
&lt;p&gt;主要是出于以下考虑：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.Hugo是一个用go写的静态网页生成器，它被提及最多的优点就是它生成网站的速度快。&lt;/p&gt;
&lt;p&gt;2.同样得益于go，Hugo的安装配置看上去也并不麻烦；Hugo可以很轻松的被编译成二进制文件安装、运行。不必像Hexo一样依赖Node.js，也不必安装一堆依赖&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Hugo的安装配置看上去也并不麻烦，同样得益于go，&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;安装&#34;&gt;安装&lt;/h1&gt;
&lt;p&gt;直接在&lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;这里&lt;/a&gt;选择合适的版本。&lt;/p&gt;
&lt;p&gt;下载好后解压，将解压出来的可执行文件 (格式为 .exe)，放到自己喜欢的目录下。直接可以使用，不需要安装。&lt;/p&gt;
&lt;p&gt;但要记住一定要将你选择的文件夹路径加入到环境变量 &lt;code&gt;PATH&lt;/code&gt; 中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：由于theme选择的是meme，需要下载extended版本的hugo；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;初始化&#34;&gt;初始化&lt;/h1&gt;
&lt;p&gt;下面，初始化博客路径。首先需要选择一个路径来存放我们的博客，在你选好的路径下执行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo new site myBlog
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这条命令会创建一个名为&lt;strong&gt;myBlog&lt;/strong&gt;（可以使用任意名字）的文件夹来存放你的博客。执行 &lt;strong&gt;cd myBlog&lt;/strong&gt; 命令进入文件夹。&lt;/p&gt;
&lt;p&gt;此时目录结构应该是这样的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
└── myBlog
    ├── config.toml / config.yaml / config.json
    ├── content
    │   └── ...
    ├── layouts
    │   └── ...
    ├── themes
    │   └── ...
    ├── static
    │   └── ...
    ├── archetypes
    │   └── ...
    ├── data
    │   └── ...
    └── ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;config.toml&lt;/code&gt; 是网站的配置文件，Hugo还可使用 &lt;code&gt;config.yaml&lt;/code&gt; 或者 &lt;code&gt;config.json&lt;/code&gt; 进行配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;content&lt;/code&gt; 文件夹中存放所有的网站内容，可在此文件夹中建立其他子文件夹，即为子模块。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;layouts&lt;/code&gt; 文件夹存放 &lt;code&gt;.html&lt;/code&gt; 格式的模板。模板确定了静态网站渲染的样式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;themes&lt;/code&gt; 文件夹存放网站使用的theme主题模板。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt; 文件夹存放未来网站使用的静态内容，比如图片、css、JavaScript等。当Hugo生成静态网站时，该文件夹中的所有内容会原封不动的被复制。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;archetypes&lt;/code&gt; 文件夹存放网站预设置的文件模板头部，当使用 &lt;code&gt;hugo new&lt;/code&gt; 时即可生成一个带有该头部的实例。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt; 文件夹用来存储Hugo生成网站时应用的配置文件。配置文件可以是YAML，JSON或者TOML格式。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;配置theme&#34;&gt;配置theme&lt;/h1&gt;
&lt;p&gt;可以在&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;这里&lt;/a&gt;找自己喜欢的主题。我暂时选择有搜索功能的meme，将主题clone到&lt;code&gt;themes&lt;/code&gt;目录下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/忘了/meme.git themes/meme
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后将&lt;code&gt;themes/meme/exampleSite/config.toml&lt;/code&gt;模板配置文件复制到根目录，然后根据此文件来配置你的设置。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：一定要把config.yaml中的theme修改为你使用的主体名称。比如我用的主题是meme，config.yaml文件就设置theme=&amp;quot;meme&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;创建新页面&#34;&gt;创建新页面&lt;/h1&gt;
&lt;p&gt;创建一个新页面&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo new about.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时 &lt;code&gt;content&lt;/code&gt; 文件夹下就多了一个 &lt;code&gt;about.md&lt;/code&gt; 文件，打开文件就可以看到时间、文件名等信息已经自动生成了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;about&amp;quot;
date: 2020-06-16T23:30:53+08:00
draft: true
---
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;两条 &lt;code&gt;---&lt;/code&gt; 间的信息是文章的配置信息，有的信息是自动生成的 (如：&lt;code&gt;title&lt;/code&gt;、&lt;code&gt;date&lt;/code&gt; 等)，简单介绍以下各项配置&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;以下项目是自动生成的:&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;title:&lt;/code&gt; # 文章标题&lt;/li&gt;
&lt;li&gt;&lt;code&gt;date:&lt;/code&gt; # 写作时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;draft:&lt;/code&gt; # 是否为草稿，如果为 &lt;code&gt;true&lt;/code&gt; 需要在命令中加入 &lt;code&gt;--buildDrafts&lt;/code&gt; 参数才会生成这个文档&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;以下项目需要自行添加:&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;description:&lt;/code&gt; # 描述&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tags:&lt;/code&gt; # 标签，用于文章分类&lt;/li&gt;
&lt;li&gt;等等&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;自动生成&lt;/code&gt; 和 &lt;code&gt;执行添加&lt;/code&gt; 的内容并不是绝对的，你可以根据自己的喜好配置模板文件 &lt;code&gt;archetypes/default.md&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;生成网站&#34;&gt;生成网站&lt;/h1&gt;
&lt;p&gt;设置完&lt;code&gt;config.toml&lt;/code&gt; 后我们执行以下命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo server --buildDrafts -w
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时你就可以在 &lt;code&gt;http://localhost:1313&lt;/code&gt; 访问到你的博客了。&lt;/p&gt;
&lt;p&gt;此时你的博客目录下就会多出一个&lt;code&gt;public&lt;/code&gt;目录，这是Hugo生成的网站。&lt;/p&gt;
&lt;p&gt;简单介绍一下两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--buildDrafts&lt;/code&gt;: 生成被标记为 「草稿」 的文档&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-w&lt;/code&gt;: 监控更改，如果发生更改直接显示到博客上&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：但此时只能在本地访问 (相当于预览博客，如果与期望值不符，可以随时更改)，如果想发布到 &lt;code&gt;Github Pages&lt;/code&gt; 上需要先将文章配置信息中的 &lt;code&gt;draft:&lt;/code&gt; 改为 &lt;code&gt;false&lt;/code&gt; ，&lt;/p&gt;
&lt;p&gt;然后执行命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;h1 id=&#34;github-pages部署&#34;&gt;GitHub Pages部署&lt;/h1&gt;
&lt;p&gt;参考&lt;a href=&#34;https://help.github.com/articles/user-organization-and-project-pages/&#34;&gt;这里&lt;/a&gt;，在Github Pages有四种类型，而对于非组织型用户来说有两种，一种是用户的个人网站，网页域名为 &lt;code&gt;username.github.io&lt;/code&gt;，另一种为Project的主页，网页域名为 &lt;code&gt;username.github.io/projectname&lt;/code&gt;。Github Pages对于Project主页的源码要求有了修改，现在也可以放置在master上，之前版本中必须放在&lt;code&gt;gh-pages&lt;/code&gt; 分支上，不过这里暂且不提，主要还是关心用户个人主页。&lt;/p&gt;
&lt;p&gt;这就需要你在Github上建立一个以 &lt;code&gt;username.github.io&lt;/code&gt; 为名称的repository，对于我来说就是 &lt;code&gt;affectalways.github.io&lt;/code&gt;。此外，需要将Hugo生成的所有静态网页push到这个repository的master分支上。现在就可以用这个域名打开个人网站了。&lt;/p&gt;
&lt;p&gt;Hugo没有提供自动发布到GitHub Pages的功能。需要将&lt;code&gt;public&lt;/code&gt;中的内容手动上传到Github上。&lt;/p&gt;
&lt;p&gt;首先执行命令&lt;code&gt;cd public&lt;/code&gt;进入到&lt;code&gt;public&lt;/code&gt;目录，然后执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init
git remote add origin https://github.com/[Github 用户名]/[Github 用户名].github.io.git
git add .
git commit -m &amp;quot;[介绍，随便写点什么，比如日期]&amp;quot;
git push （若是第一次发布，需要用到--set-upstream）
&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/blog/">blog</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/hugo/">hugo</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/hugo/">hugo</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Hugo blog（1）</title>
                <link>https://affectalways.github.io/posts/hugo/hugo_install_1/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/hugo/hugo_install_1/</guid>
                <pubDate>Tue, 16 Jun 2020 22:55:34 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h1 id=&#34;初始&#34;&gt;初始&lt;/h1&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;养个blog的想法从很早就有了但是&#34;&gt;养个Blog的想法从很早就有了，但是…&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;从本科开始就一直想要一个自己的Blog，一直没有行动。本身我就没有记日志的习惯，也没有需求和冲动写下什么东西，虽然有时想记下学的内容，但有道云笔记就够了，也没什么写技术博客的想法。除了很久之前偶尔在CSDN写了几篇入门级文章，也就没有其他了。此外，虽说博客最重要的是内容，但没有一个好的生态环境和前端界面设计，至少对于我而言，没有任何兴趣花时间在上面，原谅我是外观主义者。对于界面设计，CSDN或者博客园实在不敢恭维，尤其是CSDN。自建网站之前也尝试过，恩，还要使用服务器，花钱。我得承认，当时作为本科生的我，太过局限于学校课堂，并未走出去看看，对于网络信息的运用和挖掘也更多停留在看看答案、找找软件、翻翻视频的基础使用上，最多也就是查看下算法之类的。&lt;/p&gt;
&lt;p&gt;最近，特别是正式工作快一年了，更多地接触了“网络世界”的信息和知识，拓宽了实页。随着自我学习机会和时间愈少，碎片化学习和感想也愈多，加上虽然网上知识丰富，但内容驳杂，过段时间想再查找却需要对这些信息重新筛选、略感费劲，再加上工作后个人体悟良多，于是又一次萌生个人博客的想法。&lt;/p&gt;
&lt;h1 id=&#34;难产&#34;&gt;难产&lt;/h1&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;选择恐惧症控制狂的特质决定了我家blog的难产&#34;&gt;选择恐惧症+控制狂的特质决定了我家Blog的难产&amp;hellip;&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;尽管现在有许多像知乎专栏这样现代化的界面和良好的用户群的网站可以让人直接在上面写作，但我还是更倾向于GitHub Pages，与GitHub非常紧密的关系是该倾向性很重要的原因（这对码农而言，非常有诱惑力）。&lt;/p&gt;
&lt;p&gt;GitHub Pages搭建个人博客，使用的是轻量级的静态网页，网上已经有了很多教程和方案。几天前遇到了三种方案：Jekyll、Hexo、Hugo。Jekyll据说可定制化和功能很强大，但是ruby个人真的很不能接受。Hexo是国人教程最多的，国外口碑也非常好，看到外国的一句评论说，缺点就是大多数内容都是中文，英文教程少，哈哈。Hexo是基于Node.js，对于程序员相当友好。不过这次我决定选择另一个Framework，使用Hugo。Hugo是用现在大热的go语言写的，据说编译起来比Hexo还会快很多。而且我最近在学go&amp;hellip;&lt;/p&gt;
&lt;h1 id=&#34;开始&#34;&gt;开始&lt;/h1&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;开始吧&#34;&gt;开始吧&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;那就开始吧&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/blog/">blog</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/hugo/">hugo</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/hugo/">hugo</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>使用Hugo &#43; GitHub Pages搭建个人博客</title>
                <link>https://affectalways.github.io/posts/hugo/hugo_install/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/hugo/hugo_install/</guid>
                <pubDate>Tue, 16 Jun 2020 22:40:14 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/hugo/hugo_install/hugo.png?raw=true&#34; alt=&#34;hugo.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	Hugo：是一种通用的网站框架。严格来说，这类应用应该被称作静态网站生成器。这类应用将 Markdown 文件和主题一起编译成由 HTML、CSS、JavaScript 组成的静态网页。&lt;/p&gt;
&lt;p&gt;​	然后上传到 GitHub 上，通过 GitHub 提供的静态页面托管服务 (GitHub Pages) 进行访问。&lt;/p&gt;
&lt;p&gt;​	这里就写一篇文章来记录一下踩过的坑。&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/blog/">blog</category>
                                
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/categories/hugo/">hugo</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/hugo/">hugo</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title></title>
                <link>https://affectalways.github.io/posts/leetcode/%E6%95%B0%E7%BB%84/665%E9%9D%9E%E9%80%92%E5%87%8F%E6%95%B0%E5%88%97/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/leetcode/%E6%95%B0%E7%BB%84/665%E9%9D%9E%E9%80%92%E5%87%8F%E6%95%B0%E5%88%97/</guid>
                <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;pre&gt;&lt;code&gt;title: &amp;quot;665非递减数列&amp;quot;
date: 2020-07-28T22:55:18+08:00
keywords: 
- leetcode
- 数组
- hugo
- blog
categories: [&amp;quot;leetcode&amp;quot;, &amp;quot;数组&amp;quot;]
draft: false
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;665-非递减数列httpsleetcode-cncomproblemsnon-decreasing-array&#34;&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/non-decreasing-array/&#34;&gt;665. 非递减数列&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;给你一个长度为 n 的整数数组，请你判断在 最多 改变 1 个元素的情况下，该数组能否变成一个非递减数列。&lt;/p&gt;
&lt;p&gt;我们是这样定义一个非递减数列的： 对于数组中所有的 i (0 &amp;lt;= i &amp;lt;= n-2)，总满足 nums[i] &amp;lt;= nums[i + 1]。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: nums = [4,2,3]
输出: true
解释: 你可以通过把第一个4变成1来使得它成为一个非递减数列。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入: nums = [4,2,1]
输出: false
解释: 你不能在只改变一个元素的情况下将其变为非递减数列。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= 10 ^ 4
- 10 ^ 5 &amp;lt;= nums[i] &amp;lt;= 10 ^ 5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;解题思路&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;遍历数组，初始count = 0，如果当前元素值比它下一个元素值大，则count += 1，当count &amp;gt; 1时，直接返回false。
另外，在遍历数组的过程中，如果遇到 “特殊情况”，可以直接返回false；当循环正常结束则返回true

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func checkPossibility(nums []int) bool {
	if len(nums) == 1 {
		return true
	}
	var count int = 0
	for index, value := range nums {
		if index == 0 {
			continue
		}
		if value &amp;lt; nums[index-1] {
			count += 1
		}
		if count &amp;gt; 1 {
			return false
		}
	}

	return true
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;但是！！！&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;提交后，运行过程

输入:
[3,4,2,3]
输出
true
预期结果
false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;所以要考虑特殊情况&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;现在就需要nums[i-2] &amp;lt;= nums[i-1] &amp;gt; nums[i] &amp;lt;= nums[i+1]这个条件了
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;最终代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func checkPossibility(nums []int) bool {
	if len(nums) &amp;lt;= 2 {
		return true
	}
	var count int = 0
	for index, value := range nums {
		if index == 0 {
			continue
		}
		if value &amp;lt; nums[index-1] {
			count += 1
			if nums[index-1] &amp;gt; nums[index+1] &amp;amp;&amp;amp; nums[index-2] &amp;gt; value {
				return false
			}
		}
		if count &amp;gt; 1 {
			return false
		}
	}

	return true
}
&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title></title>
                <link>https://affectalways.github.io/posts/leetcode/%E9%93%BE%E8%A1%A8/0207%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/leetcode/%E9%93%BE%E8%A1%A8/0207%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4/</guid>
                <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;pre&gt;&lt;code&gt;title: &amp;quot;0207 链表相交&amp;quot;
date: 2020-07-15T21:20:33+08:00
tags: [&amp;quot;leetcode&amp;quot;]
keywords: 
- leetcode
- blog
- 博客
- 领扣
- 0207 链表相交
- 算法
- 链表
description: &amp;quot;leetcode，0207 链表相交&amp;quot;
categories: [&amp;quot;leetcode&amp;quot;, &amp;quot;链表&amp;quot;]
draft: false
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;面试题-0207-链表相交httpsleetcode-cncomproblemsintersection-of-two-linked-lists-lcci&#34;&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/intersection-of-two-linked-lists-lcci/&#34;&gt;面试题 02.07. 链表相交&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;我竟然没读懂题！！！！！！！！！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定两个（单向）链表，判定它们是否相交并返回交点。请注意相交的定义基于节点的引用，而不是基于节点的值。换句话说，如果一个链表的第k个节点与另一个链表的第j个节点是同一节点（引用完全相同），则这两个链表相交。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3
输出：Reference of the node with value = 8
输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
输出：Reference of the node with value = 2
输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
输出：null
输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。
解释：这两个链表不相交，因此返回 null。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 1.如果两个链表没有交点，返回 null 。
 2.在返回结果后，两个链表仍须保持原有的结构。
 3.可假定整个链表结构中没有循环。
 4.程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;双指针什么的，技巧性有点强。最朴素的做法是求长度

1.第一次遍历两个链表，记录长度
2.根据两个链表的长度，得出长度差n,让长的链表的指针先走n步
3.然后两个指针一起移动，判断两者是否相等（指向同一个内存地址）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None


class Solution:

    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -&amp;gt; ListNode:
        len_a = 0
        len_b = 0
        cur_a = headA
        cur_b = headB
        
        # 1.第一次遍历两个链表，记录长度
        while cur_a:
            len_a += 1
            cur_a = cur_a.next

        while cur_b:
            len_b += 1
            cur_b = cur_b.next
            
		# 2.根据两个链表的长度，得出长度差n,让长的链表的指针先走n步
        cur_a = headA
        cur_b = headB
        while len_b &amp;gt; len_a:
            cur_b = cur_b.next
            len_b -= 1
        while len_a &amp;gt; len_b:
            cur_a = cur_a.next
            len_a -= 1
		# 3.然后两个指针一起移动，判断两者是否相等（指向同一个内存地址）
        while cur_a:
            if cur_a == cur_b:
                return cur_a

            cur_a = cur_a.next
            cur_b = cur_b.next

        return None

def create_list(sequence):
    headA = None
    cur = None
    for i in sequence:
        node = ListNode(i)
        if headA is None:
            headA = cur = node
            continue
        cur.next = node
        cur = cur.next
    return headA


if __name__ == &#39;__main__&#39;:
    intersectVal = 8
    listA = [4, 1, 8, 4, 5]
    headA = create_list(listA)
    listB = [5, 0, 1, 8, 4, 5]
    headB = create_list(listB)
    skipA = 2
    skipB = 3

&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title></title>
                <link>https://affectalways.github.io/posts/leetcode/%E9%93%BE%E8%A1%A8/offer06%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/leetcode/%E9%93%BE%E8%A1%A8/offer06%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</guid>
                <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;pre&gt;&lt;code&gt;title: &amp;quot;Offer 06. 从尾到头打印链表&amp;quot;
date: 2020-07-15T21:20:33+08:00
tags: [&amp;quot;leetcode&amp;quot;]
keywords: 
- leetcode
- blog
- 博客
- 领扣
- Offer 06. 从尾到头打印链表
- 算法
- 链表
description: &amp;quot;leetcode，Offer 06. 从尾到头打印链表&amp;quot;
categories: [&amp;quot;leetcode&amp;quot;, &amp;quot;链表&amp;quot;]
draft: false

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;剑指-offer-06-从尾到头打印链表httpsleetcode-cncomproblemscong-wei-dao-tou-da-yin-lian-biao-lcof&#34;&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/&#34;&gt;剑指 Offer 06. 从尾到头打印链表&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：head = [1,3,2]
输出：[2,3,1]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;限制：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0 &amp;lt;= 链表长度 &amp;lt;= 10000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## 方法一：栈
栈的特点是后进先出，即最后压入栈的元素最先弹出。考虑到栈的这一特点，使用栈将链表元素顺序倒置。从链表的头节点开始，依次将每个节点压入栈内，然后依次弹出栈内的元素并存储到数组中。

创建一个栈，用于存储链表的节点
创建一个指针，初始时指向链表的头节点
当指针指向的元素非空时，重复下列操作：
将指针指向的节点压入栈内
将指针移到当前节点的下一个节点
获得栈的大小 size，创建一个数组 print，其大小为 size
创建下标并初始化 index = 0
重复 size 次下列操作：
从栈内弹出一个节点，将该节点的值存到 print[index]
将 index 的值加 1
返回 print


## 复杂性分析

时间复杂度：O(n)O(n)。正向遍历一遍链表，然后从栈弹出全部节点，等于又反向遍历一遍链表。
空间复杂度：O(n)O(n)。额外使用一个栈存储链表中的每个节点。

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None


class Solution(object):
    def reversePrint(self, head):
        &amp;quot;&amp;quot;&amp;quot;
        :type head: ListNode
        :rtype: List[int]
        &amp;quot;&amp;quot;&amp;quot;
        if head is None:
            return []
        stack = []
        while head:
            stack.append(head.val)
            head = head.next

        stack.reverse()
        return stack
        # result = None
        # cur = None
        # for node in stack:
        #     if result is None:
        #         result = node
        #         cur = result
        #         continue
        #     cur.next = node
        #     cur = cur.next
        # return result


def create_list(sequence):
    headA = None
    cur = None
    for i in sequence:
        node = ListNode(i)
        if headA is None:
            headA = cur = node
            continue
        cur.next = node
        cur = cur.next
    return headA


if __name__ == &#39;__main__&#39;:
    solution = Solution()
    head = create_list([1, 3, 2])
    result = solution.reversePrint(head)

&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
    </channel>
</rss>
