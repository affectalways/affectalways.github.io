<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>affectalways</title>
        <link>https://affectalways.github.io/</link>
        <description>affectalways.</description>
        <generator>Hugo 0.72.0 https://gohugo.io/</generator>
        
            <language>en</language>
        
        
            <managingEditor>affectalways@gmail.com (affectalways)</managingEditor>
        
        
            <webMaster>affectalways@gmail.com (affectalways)</webMaster>
        
        
            <copyright>@2020 affectalways</copyright>
        
        <lastBuildDate>Wed, 17 Jun 2020 20:04:45 &#43;0800</lastBuildDate>
        
            <atom:link rel="self" type="application/rss&#43;xml" href="https://affectalways.github.io/rss.xml" />
        
        
            <item>
                <title>Hugo 建站(2)</title>
                <link>https://affectalways.github.io/posts/hugo/hugo_install_2/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/hugo/hugo_install_2/</guid>
                <pubDate>Tue, 16 Jun 2020 23:30:53 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;正如上一篇说的，我选择了&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;作为静态网页生成器。为何要放弃Hexo，换成Hugo呢？&lt;/p&gt;
&lt;p&gt;主要是出于以下考虑：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.Hugo是一个用go写的静态网页生成器，它被提及最多的优点就是它生成网站的速度快。&lt;/p&gt;
&lt;p&gt;2.同样得益于go，Hugo的安装配置看上去也并不麻烦；Hugo可以很轻松的被编译成二进制文件安装、运行。不必像Hexo一样依赖Node.js，也不必安装一堆依赖&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Hugo的安装配置看上去也并不麻烦，同样得益于go，&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;安装&#34;&gt;安装&lt;/h1&gt;
&lt;p&gt;直接在&lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;这里&lt;/a&gt;选择合适的版本。&lt;/p&gt;
&lt;p&gt;下载好后解压，将解压出来的可执行文件 (格式为 .exe)，放到自己喜欢的目录下。直接可以使用，不需要安装。&lt;/p&gt;
&lt;p&gt;但要记住一定要将你选择的文件夹路径加入到环境变量 &lt;code&gt;PATH&lt;/code&gt; 中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：由于theme选择的是meme，需要下载extended版本的hugo；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;初始化&#34;&gt;初始化&lt;/h1&gt;
&lt;p&gt;下面，初始化博客路径。首先需要选择一个路径来存放我们的博客，在你选好的路径下执行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo new site myBlog
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这条命令会创建一个名为&lt;strong&gt;myBlog&lt;/strong&gt;（可以使用任意名字）的文件夹来存放你的博客。执行 &lt;strong&gt;cd myBlog&lt;/strong&gt; 命令进入文件夹。&lt;/p&gt;
&lt;p&gt;此时目录结构应该是这样的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
└── myBlog
    ├── config.toml / config.yaml / config.json
    ├── content
    │   └── ...
    ├── layouts
    │   └── ...
    ├── themes
    │   └── ...
    ├── static
    │   └── ...
    ├── archetypes
    │   └── ...
    ├── data
    │   └── ...
    └── ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;config.toml&lt;/code&gt; 是网站的配置文件，Hugo还可使用 &lt;code&gt;config.yaml&lt;/code&gt; 或者 &lt;code&gt;config.json&lt;/code&gt; 进行配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;content&lt;/code&gt; 文件夹中存放所有的网站内容，可在此文件夹中建立其他子文件夹，即为子模块。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;layouts&lt;/code&gt; 文件夹存放 &lt;code&gt;.html&lt;/code&gt; 格式的模板。模板确定了静态网站渲染的样式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;themes&lt;/code&gt; 文件夹存放网站使用的theme主题模板。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt; 文件夹存放未来网站使用的静态内容，比如图片、css、JavaScript等。当Hugo生成静态网站时，该文件夹中的所有内容会原封不动的被复制。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;archetypes&lt;/code&gt; 文件夹存放网站预设置的文件模板头部，当使用 &lt;code&gt;hugo new&lt;/code&gt; 时即可生成一个带有该头部的实例。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt; 文件夹用来存储Hugo生成网站时应用的配置文件。配置文件可以是YAML，JSON或者TOML格式。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;配置theme&#34;&gt;配置theme&lt;/h1&gt;
&lt;p&gt;可以在&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;这里&lt;/a&gt;找自己喜欢的主题。我暂时选择有搜索功能的meme，将主题clone到&lt;code&gt;themes&lt;/code&gt;目录下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/忘了/meme.git themes/meme
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后将&lt;code&gt;themes/meme/exampleSite/config.toml&lt;/code&gt;模板配置文件复制到根目录，然后根据此文件来配置你的设置。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：一定要把config.yaml中的theme修改为你使用的主体名称。比如我用的主题是meme，config.yaml文件就设置theme=&amp;quot;meme&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;创建新页面&#34;&gt;创建新页面&lt;/h1&gt;
&lt;p&gt;创建一个新页面&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo new about.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时 &lt;code&gt;content&lt;/code&gt; 文件夹下就多了一个 &lt;code&gt;about.md&lt;/code&gt; 文件，打开文件就可以看到时间、文件名等信息已经自动生成了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;about&amp;quot;
date: 2020-06-16T23:30:53+08:00
draft: true
---
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;两条 &lt;code&gt;---&lt;/code&gt; 间的信息是文章的配置信息，有的信息是自动生成的 (如：&lt;code&gt;title&lt;/code&gt;、&lt;code&gt;date&lt;/code&gt; 等)，简单介绍以下各项配置&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;以下项目是自动生成的:&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;title:&lt;/code&gt; # 文章标题&lt;/li&gt;
&lt;li&gt;&lt;code&gt;date:&lt;/code&gt; # 写作时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;draft:&lt;/code&gt; # 是否为草稿，如果为 &lt;code&gt;true&lt;/code&gt; 需要在命令中加入 &lt;code&gt;--buildDrafts&lt;/code&gt; 参数才会生成这个文档&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;以下项目需要自行添加:&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;description:&lt;/code&gt; # 描述&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tags:&lt;/code&gt; # 标签，用于文章分类&lt;/li&gt;
&lt;li&gt;等等&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;自动生成&lt;/code&gt; 和 &lt;code&gt;执行添加&lt;/code&gt; 的内容并不是绝对的，你可以根据自己的喜好配置模板文件 &lt;code&gt;archetypes/default.md&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;生成网站&#34;&gt;生成网站&lt;/h1&gt;
&lt;p&gt;设置完&lt;code&gt;config.toml&lt;/code&gt; 后我们执行以下命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo server --buildDrafts -w
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时你就可以在 &lt;code&gt;http://localhost:1313&lt;/code&gt; 访问到你的博客了。&lt;/p&gt;
&lt;p&gt;此时你的博客目录下就会多出一个&lt;code&gt;public&lt;/code&gt;目录，这是Hugo生成的网站。&lt;/p&gt;
&lt;p&gt;简单介绍一下两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--buildDrafts&lt;/code&gt;: 生成被标记为 「草稿」 的文档&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-w&lt;/code&gt;: 监控更改，如果发生更改直接显示到博客上&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：但此时只能在本地访问 (相当于预览博客，如果与期望值不符，可以随时更改)，如果想发布到 &lt;code&gt;Github Pages&lt;/code&gt; 上需要先将文章配置信息中的 &lt;code&gt;draft:&lt;/code&gt; 改为 &lt;code&gt;false&lt;/code&gt; ，&lt;/p&gt;
&lt;p&gt;然后执行命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;h1 id=&#34;github-pages部署&#34;&gt;GitHub Pages部署&lt;/h1&gt;
&lt;p&gt;参考&lt;a href=&#34;https://help.github.com/articles/user-organization-and-project-pages/&#34;&gt;这里&lt;/a&gt;，在Github Pages有四种类型，而对于非组织型用户来说有两种，一种是用户的个人网站，网页域名为 &lt;code&gt;username.github.io&lt;/code&gt;，另一种为Project的主页，网页域名为 &lt;code&gt;username.github.io/projectname&lt;/code&gt;。Github Pages对于Project主页的源码要求有了修改，现在也可以放置在master上，之前版本中必须放在&lt;code&gt;gh-pages&lt;/code&gt; 分支上，不过这里暂且不提，主要还是关心用户个人主页。&lt;/p&gt;
&lt;p&gt;这就需要你在Github上建立一个以 &lt;code&gt;username.github.io&lt;/code&gt; 为名称的repository，对于我来说就是 &lt;code&gt;affectalways.github.io&lt;/code&gt;。此外，需要将Hugo生成的所有静态网页push到这个repository的master分支上。现在就可以用这个域名打开个人网站了。&lt;/p&gt;
&lt;p&gt;Hugo没有提供自动发布到GitHub Pages的功能。需要将&lt;code&gt;public&lt;/code&gt;中的内容手动上传到Github上。&lt;/p&gt;
&lt;p&gt;首先执行命令&lt;code&gt;cd public&lt;/code&gt;进入到&lt;code&gt;public&lt;/code&gt;目录，然后执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init
git remote add origin https://github.com/[Github 用户名]/[Github 用户名].github.io.git
git add .
git commit -m &amp;quot;[介绍，随便写点什么，比如日期]&amp;quot;
git push （若是第一次发布，需要用到--set-upstream）
&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/hugo/">hugo</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Hugo 建站</title>
                <link>https://affectalways.github.io/posts/hugo/hugo_install_1/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/hugo/hugo_install_1/</guid>
                <pubDate>Tue, 16 Jun 2020 22:55:34 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;h1 id=&#34;初始&#34;&gt;初始&lt;/h1&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;养个blog的想法从很早就有了但是&#34;&gt;养个Blog的想法从很早就有了，但是…&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;从本科开始就一直想要一个自己的Blog，一直没有行动。本身我就没有记日志的习惯，也没有需求和冲动写下什么东西，虽然有时想记下学的内容，但有道云笔记就够了，也没什么写技术博客的想法。除了很久之前偶尔在CSDN写了几篇入门级文章，也就没有其他了。此外，虽说博客最重要的是内容，但没有一个好的生态环境和前端界面设计，至少对于我而言，没有任何兴趣花时间在上面，原谅我是外观主义者。对于界面设计，CSDN或者博客园实在不敢恭维，尤其是CSDN。自建网站之前也尝试过，恩，还要使用服务器，花钱。我得承认，当时作为本科生的我，太过局限于学校课堂，并未走出去看看，对于网络信息的运用和挖掘也更多停留在看看答案、找找软件、翻翻视频的基础使用上，最多也就是查看下算法之类的。&lt;/p&gt;
&lt;p&gt;最近，特别是正式工作快一年了，更多地接触了“网络世界”的信息和知识，拓宽了实页。随着自我学习机会和时间愈少，碎片化学习和感想也愈多，加上虽然网上知识丰富，但内容驳杂，过段时间想再查找却需要对这些信息重新筛选、略感费劲，再加上工作后个人体悟良多，于是又一次萌生个人博客的想法。&lt;/p&gt;
&lt;h1 id=&#34;难产&#34;&gt;难产&lt;/h1&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;选择恐惧症控制狂的特质决定了我家blog的难产&#34;&gt;选择恐惧症+控制狂的特质决定了我家Blog的难产&amp;hellip;&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;尽管现在有许多像知乎专栏这样现代化的界面和良好的用户群的网站可以让人直接在上面写作，但我还是更倾向于GitHub Pages，与GitHub非常紧密的关系是该倾向性很重要的原因（这对码农而言，非常有诱惑力）。&lt;/p&gt;
&lt;p&gt;GitHub Pages搭建个人博客，使用的是轻量级的静态网页，网上已经有了很多教程和方案。几天前遇到了三种方案：Jekyll、Hexo、Hugo。Jekyll据说可定制化和功能很强大，但是ruby个人真的很不能接受。Hexo是国人教程最多的，国外口碑也非常好，看到外国的一句评论说，缺点就是大多数内容都是中文，英文教程少，哈哈。Hexo是基于Node.js，对于程序员相当友好。不过这次我决定选择另一个Framework，使用Hugo。Hugo是用现在大热的go语言写的，据说编译起来比Hexo还会快很多。而且我最近在学go&amp;hellip;&lt;/p&gt;
&lt;h1 id=&#34;开始&#34;&gt;开始&lt;/h1&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;开始吧&#34;&gt;开始吧&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;那就开始吧&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/hugo/">hugo</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>使用Hugo &#43; GitHub Pages搭建个人博客</title>
                <link>https://affectalways.github.io/posts/hugo/hugo_install/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/hugo/hugo_install/</guid>
                <pubDate>Tue, 16 Jun 2020 22:40:14 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;p&gt;&lt;img src=&#34;https://cdn.liuzhichao.com/images/2018/09/hugo.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	Hugo：是一种通用的网站框架。严格来说，这类应用应该被称作静态网站生成器。这类应用将 Markdown 文件和主题一起编译成由 HTML、CSS、JavaScript 组成的静态网页。&lt;/p&gt;
&lt;p&gt;​	然后上传到 GitHub 上，通过 GitHub 提供的静态页面托管服务 (GitHub Pages) 进行访问。&lt;/p&gt;
&lt;p&gt;​	这里就写一篇文章来记录一下踩过的坑。&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/hugo/">hugo</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>使用Hugo &#43; GitHub Pages搭建个人博客</title>
                <link>https://affectalways.github.io/posts/hugo_install/</link>
                <guid isPermaLink="true">https://affectalways.github.io/posts/hugo_install/</guid>
                <pubDate>Tue, 16 Jun 2020 22:40:14 &#43;0800</pubDate>
                
                    <author>affectalways@gmail.com (affectalways)</author>
                
                <copyright>@2020 affectalways</copyright>
                
                    <description>&lt;p&gt;&lt;img src=&#34;https://cdn.liuzhichao.com/images/2018/09/hugo.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	Hugo：是一种通用的网站框架。严格来说，这类应用应该被称作静态网站生成器。这类应用将 Markdown 文件和主题一起编译成由 HTML、CSS、JavaScript 组成的静态网页。&lt;/p&gt;
&lt;p&gt;​	然后上传到 GitHub 上，通过 GitHub 提供的静态页面托管服务 (GitHub Pages) 进行访问。&lt;/p&gt;
&lt;p&gt;​	这里就写一篇文章来记录一下踩过的坑。&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://affectalways.github.io/tags/hugo/">hugo</category>
                                
                            
                        
                    
                
            </item>
        
    </channel>
</rss>
