[{"categories":null,"content":"不能评论! Hugo 是一个强大的静态网页生成器，使用 go 开发，速度贼快。不过 Hugo 还比较年轻，没有像 NexT 那样功能强大，成熟稳定的主题。所以很多东西需要自己动手撸。\n比如评论系统。\n 评论系统排名\n  valine \u003e gitalk \u003e gitment \u003e livere \u003e 畅言\n 关于Valine   官方网址： «https://valine.js.org/\u003e\u003e\n  其特性不一一赘述，官方网址有介绍\n  添加评论区 目前博客使用的主题是meme\n不同的主题可能有所区别，但原理大都类似\n 原理？ Hugo 会将 Markdown 文档 按照 主题 (包括 HTML 模板、CSS、JavaScript 等) 编译成静态网页\n那么我们只需要将 Gitalk 作为一个 \u003cdiv\u003e 插入到 HTML 模板中，然后在 config.toml 中添加相关配置，就可以添加评论区了\n Leancloud相关配置 评论系统依赖于leancloud，所以需要先在leancloud中进行相关的准备工作。\n  登录 或 注册 LeanCloud\n  登录成功后，进入后台点击左上角的创建应用：\n  创建好应用，进入应用，左边栏找到 设置 ，然后点击 应用Key，此时记录出现的 App ID 和 App Key，后面配置文件中会用到：\n  因为评论和文章阅读数统计依赖于存储，所以还需要建立两个新的存储 Class，左边栏找到并点击 存储，点击 创建Class:\n  创建两个存储Class，分别命名为: Counter 和 Comment;\n  还需要为应用添加安全域名，左边栏点击 设置，找到 安全中心，点击后会看到 安全域名 设置框，输入博客使用的域名，点击保存即可：\n  config.toml开启comment  将enableComments = false设置为enableComments = true 将enableValine = false设置为enableValine = true   添加 Valine 参数项：\n ## Valine enableValine = true valineAppId = \"************\" valineAppKey = \"*****************\" valinePlaceholder = \"Just go go\" valinePath = \"\" valineAvatar = \"mm\" valineMeta = [\"nick\", \"mail\", \"link\"] valinePageSize = 10 valineLang = \"zh-cn\" valineVisitor = false valineHighlight = true valineAvatarForce = false valineRecordIP = false valineServerURLs = \"\" valineEmojiCDN = \"\" valineEmojiMaps = {} valineEnableQQ = false valineRequiredFields = [] 上面几项内容的含义，这里简单一说，具体还是要看 Valine官网中配置相关的内容：\n   参数 用途     enable 这是用于主题中配置的，不是官方Valine的参数，true时控制开启此评论系统   appId 这是在 leancloud 后台应用中获取的，也就是上面提到的 App ID   appKey 这是在 leancloud 后台应用中获取的，也就是上面提到的 App Key   notify 用于控制是否开启邮件通知功能，具体参考邮件提醒配置   verify 用于控制是否开启评论验证码功能   avatar 用于配置评论项中用户头像样式，有多种选择：mm, identicon, monsterid, wavatar, retro, hide。详细参考：头像配置   placehoder 评论框的提示符   visitor 控制是否开启文章阅读数的统计功能i, 详情阅读文章阅读数统计    修改主题文件 主要是修改主题中评论相关的布局文件 themes\\meme\\layouts\\partials\\components\\comments.html，按照 Valine快速开始 添加 Valine 相关代码，找到以下位置\n{{ if .Site.Params.enableValine }} {{- end }} 添加的 Valine 评论的代码如下：\n{{ if .Site.Params.enableValine }} \u003c!-- id 将作为查询条件 --\u003e \u003cspan id=\"{{ .URL | relURL }}\" class=\"leancloud_visitors\" data-flag-title=\"{{ .Title }}\"\u003e \u003cp\u003e\u003c/p\u003e \u003c/span\u003e \u003cdiv id=\"vcomments\"\u003e\u003c/div\u003e \u003cscript src=\"//cdn1.lncld.net/static/js/3.0.4/av-min.js\"\u003e\u003c/script\u003e \u003cscript src='//unpkg.com/valine/dist/Valine.min.js'\u003e\u003c/script\u003e \u003cscript type=\"text/javascript\"\u003e new Valine({ el: '#vcomments' , appId: '{{ .Site.Params.valine.valineAppId }}', appKey: '{{ .Site.Params.valine.valineAppKey }}', avatar:'{{ .Site.Params.valine.valineAvatar }}', placeholder: '{{ .Site.Params.valine.valinePlaceholder }}', visitor: {{ .Site.Params.valine.valineVisitor }} }); \u003c/script\u003e {{ end }} 可以看到上述代码中引用了配置文件中的相关参数，这样以后修改配置就不用修改代码了，只需要改配置文件 config.toml。\n","description":"","tags":["hugo"],"title":"Hugo 添加评论功能","uri":"/posts/hugo/hugo_comment/"},{"categories":null,"content":"居然都找不到！ 其实Blog我主要是用来做一些记录，更何况忙起来经常不更新，因此尽管有加上一些流量统计的功能，但实际上也不怎么关心到底有多少访问量。在浏览网上其他人的博客布局寻找灵感时，突然看到有博客提到GitHub Pages屏蔽了百度的爬虫，所以百度是搜索不到GitHub Pages上的网页的。\n什么？所以百度搜索搜不到我的个人博客？不死心，尝试一下，找得到github、gist主页，但是就是找不到github.io后缀的网页。除了百度之外，我还尝试了Bing、Google，都没有，所以常用的三大搜索引擎都找不到我的博客，小小网站在浩瀚的网络世界中就像是一个孤岛，只有知道url才能达到。突然想到传说中的暗网是否也是加上了反爬，所以大众难以发现？\n话说回来，反爬也有反爬的好处，比如有时博客内容特别个人，只是想找个地方发泄一下、记录一下，不被搜索引擎索引到也降低了被他人发现的几率，就像是一个打开的日记本，但是不用担心被家长偷看的感觉。\n如何让搜索引擎索引到呢？ 发现流行的搜索引擎居然都找不到博客，那就需要赶紧找解决方法。Google和Bing还不清楚是怎么回事，但网上流传的email回复内容都点明了Github Pages禁止了百度爬虫的爬去，似乎原因是百度爬虫爬得太过于频繁，会严重影响服务器性能。针对百度爬虫的问题，大家找了很多方法。自建服务器托管博客、将博客放在Gitlab上或者CDN方法都不在我的选择范围内，因为暂时我还没有购买服务器或者域名的打算，所以决定放弃百度……但不管怎么样Bing和Google还是要设置好的！\nGoogle 添加资源 在google搜索页面输入“site:affectalways.github.io”就可以看到这个网页是否被google索引到，如果没被索引到，在搜索结果页面就会直接提示你使用Google Search Console。登录后，如果是首次使用在Search Console中以下界面中选择“网页”类型资源，并将博客完整url填入其中，我填入“https://affectalways.github.io”。注意http或者https，www等最好能完全正确。\n如果已经添加过资源，则需要点击左上角的按钮，然后和上面一样地添加资源即可。\n资源添加后，需要验证你对该网站有所有权。Google提供了几种方法，我选择了HTML验证文件上传，只需要根据要求，下载HTML验证文件，把文件放在GitHub Pages项目的根目录（即网站的根目录），然后进行验证即可。\n PS：下载的html验证文件直接放在网站的根目录不一定生效，需要将html验证文件重命名为index.html或者把html验证文件里面的内容加到index.html文件内\n 站点地图 在左侧点击“站点地图”，并在右侧点添加/测试站点地图，并添加url，我的是https://affectalways.github.io/sitemap.xml\nBing 相似地，在Bing网站管理登陆、添加网站url。\n然后在左侧点击“配置我的网站\u003eSitemaps”，并在右侧加上sitemap的url，点击提交。\n百度不死心的尝试  不死心的失败了\n ","description":"","tags":["hugo"],"title":"Hugo 让 GitHub Pages被索引到","uri":"/posts/hugo/hugo_seo/"},{"categories":null,"content":"Hugo Hugo是支持用户自定义分类的，这个称为taxonomy，可以来对网页内容进行逻辑划分，详情可以在这里查看。\n分类taxonomy有3个概念：\n Taxonomy 分类: 可以用来对内容进行分类的类别 Term 术语: 分类的一个键 Value 值: 分配给这个Term的具体内容  例如我需要增加3个分类，分别是：\n tag：文章标签 topic：文章主题/文章系列 category：文章分类  以tag为例，则对应Taxonomy是tag，Term是具体标签内容比如hugo，Value是打上这个标签的对应网页。\n配置分类 需要在 config.toml 中增加分类。还是这个例子，则需要增加如下内容：\n[taxonomies] tag = \"tags\" category = \"categories\" 而将每个post的头部也相应增加对应的分类，例如这篇的头部就相应为：\ntitle: \"Hugo添加tags等分类\" date: 2020-06-17T20:19:37+08:00 tags: [\"hugo\"] draft: true 当然实际上，Hugo默认会产生 tags 和 categories 的分类，如果只需要这两个，可以不用在 config.toml 中声明就在post头部使用。\n分类集合查看 使用分类taxonomy之后，Hugo会使用分类的模板 (taxonomy templates) 来自动生成一个显示所有分类的term术语的网页以及一个显示该术语的所有value内容列表网页。\n还是以tag为例：\nexample.com/tags/ 会列出tags中的所有术语；\nexample.com/tags/docker 会列出tags标为docker的所有网页列表。\n","description":"","tags":["hugo"],"title":"Hugo 添加tags等分类","uri":"/posts/hugo/hugo_tags/"},{"categories":null,"content":"Introduction 正如上一篇说的，我选择了Hugo作为静态网页生成器。为何要放弃Hexo，换成Hugo呢？\n主要是出于以下考虑：\n 1.Hugo是一个用go写的静态网页生成器，它被提及最多的优点就是它生成网站的速度快。\n2.同样得益于go，Hugo的安装配置看上去也并不麻烦；Hugo可以很轻松的被编译成二进制文件安装、运行。不必像Hexo一样依赖Node.js，也不必安装一堆依赖\n  Hugo的安装配置看上去也并不麻烦，同样得益于go，  安装 直接在这里选择合适的版本。\n下载好后解压，将解压出来的可执行文件 (格式为 .exe)，放到自己喜欢的目录下。直接可以使用，不需要安装。\n但要记住一定要将你选择的文件夹路径加入到环境变量 PATH 中。\n PS：由于theme选择的是meme，需要下载extended版本的hugo；\n 初始化 下面，初始化博客路径。首先需要选择一个路径来存放我们的博客，在你选好的路径下执行：\nhugo new site myBlog 这条命令会创建一个名为myBlog（可以使用任意名字）的文件夹来存放你的博客。执行 cd myBlog 命令进入文件夹。\n此时目录结构应该是这样的\n. └── myBlog ├── config.toml / config.yaml / config.json ├── content │ └── ... ├── layouts │ └── ... ├── themes │ └── ... ├── static │ └── ... ├── archetypes │ └── ... ├── data │ └── ... └── ... 其中：\n config.toml 是网站的配置文件，Hugo还可使用 config.yaml 或者 config.json 进行配置。 content 文件夹中存放所有的网站内容，可在此文件夹中建立其他子文件夹，即为子模块。 layouts 文件夹存放 .html 格式的模板。模板确定了静态网站渲染的样式。 themes 文件夹存放网站使用的theme主题模板。 static 文件夹存放未来网站使用的静态内容，比如图片、css、JavaScript等。当Hugo生成静态网站时，该文件夹中的所有内容会原封不动的被复制。 archetypes 文件夹存放网站预设置的文件模板头部，当使用 hugo new 时即可生成一个带有该头部的实例。 data 文件夹用来存储Hugo生成网站时应用的配置文件。配置文件可以是YAML，JSON或者TOML格式。  配置theme 可以在这里找自己喜欢的主题。我暂时选择有搜索功能的meme，将主题clone到themes目录下：\ngit clone https://github.com/忘了/meme.git themes/meme 然后将themes/meme/exampleSite/config.toml模板配置文件复制到根目录，然后根据此文件来配置你的设置。\n PS：一定要把config.yaml中的theme修改为你使用的主体名称。比如我用的主题是meme，config.yaml文件就设置theme=\"meme”\n 创建新页面 创建一个新页面\nhugo new about.md 此时 content 文件夹下就多了一个 about.md 文件，打开文件就可以看到时间、文件名等信息已经自动生成了\n--- title: \"about\" date: 2020-06-16T23:30:53+08:00 draft: true --- 两条 --- 间的信息是文章的配置信息，有的信息是自动生成的 (如：title、date 等)，简单介绍以下各项配置\n  以下项目是自动生成的: title: # 文章标题 date: # 写作时间 draft: # 是否为草稿，如果为 true 需要在命令中加入 --buildDrafts 参数才会生成这个文档 以下项目需要自行添加: description: # 描述 tags: # 标签，用于文章分类 等等   自动生成 和 执行添加 的内容并不是绝对的，你可以根据自己的喜好配置模板文件 archetypes/default.md\n生成网站 设置完config.toml 后我们执行以下命令\nhugo server --buildDrafts -w 此时你就可以在 http://localhost:1313 访问到你的博客了。\n此时你的博客目录下就会多出一个public目录，这是Hugo生成的网站。\n简单介绍一下两个参数：\n --buildDrafts: 生成被标记为 「草稿」 的文档 -w: 监控更改，如果发生更改直接显示到博客上   PS：但此时只能在本地访问 (相当于预览博客，如果与期望值不符，可以随时更改)，如果想发布到 Github Pages 上需要先将文章配置信息中的 draft: 改为 false ，\n然后执行命令\nhugo   GitHub Pages部署 参考这里，在Github Pages有四种类型，而对于非组织型用户来说有两种，一种是用户的个人网站，网页域名为 username.github.io，另一种为Project的主页，网页域名为 username.github.io/projectname。Github Pages对于Project主页的源码要求有了修改，现在也可以放置在master上，之前版本中必须放在gh-pages 分支上，不过这里暂且不提，主要还是关心用户个人主页。\n这就需要你在Github上建立一个以 username.github.io 为名称的repository，对于我来说就是 affectalways.github.io。此外，需要将Hugo生成的所有静态网页push到这个repository的master分支上。现在就可以用这个域名打开个人网站了。\nHugo没有提供自动发布到GitHub Pages的功能。需要将public中的内容手动上传到Github上。\n首先执行命令cd public进入到public目录，然后执行\ngit init git remote add origin https://github.com/[Github 用户名]/[Github 用户名].github.io.git git add . git commit -m \"[介绍，随便写点什么，比如日期]\" git push （若是第一次发布，需要用到--set-upstream） ","description":"","tags":["hugo"],"title":"Hugo 建站（2）","uri":"/posts/hugo/hugo_install_2/"},{"categories":null,"content":"初始  养个Blog的想法从很早就有了，但是…  从本科开始就一直想要一个自己的Blog，一直没有行动。本身我就没有记日志的习惯，也没有需求和冲动写下什么东西，虽然有时想记下学的内容，但有道云笔记就够了，也没什么写技术博客的想法。除了很久之前偶尔在CSDN写了几篇入门级文章，也就没有其他了。此外，虽说博客最重要的是内容，但没有一个好的生态环境和前端界面设计，至少对于我而言，没有任何兴趣花时间在上面，原谅我是外观主义者。对于界面设计，CSDN或者博客园实在不敢恭维，尤其是CSDN。自建网站之前也尝试过，恩，还要使用服务器，花钱。我得承认，当时作为本科生的我，太过局限于学校课堂，并未走出去看看，对于网络信息的运用和挖掘也更多停留在看看答案、找找软件、翻翻视频的基础使用上，最多也就是查看下算法之类的。\n最近，特别是正式工作快一年了，更多地接触了“网络世界”的信息和知识，拓宽了实页。随着自我学习机会和时间愈少，碎片化学习和感想也愈多，加上虽然网上知识丰富，但内容驳杂，过段时间想再查找却需要对这些信息重新筛选、略感费劲，再加上工作后个人体悟良多，于是又一次萌生个人博客的想法。\n难产  选择恐惧症+控制狂的特质决定了我家Blog的难产…  尽管现在有许多像知乎专栏这样现代化的界面和良好的用户群的网站可以让人直接在上面写作，但我还是更倾向于GitHub Pages，与GitHub非常紧密的关系是该倾向性很重要的原因（这对码农而言，非常有诱惑力）。\nGitHub Pages搭建个人博客，使用的是轻量级的静态网页，网上已经有了很多教程和方案。几天前遇到了三种方案：Jekyll、Hexo、Hugo。Jekyll据说可定制化和功能很强大，但是ruby个人真的很不能接受。Hexo是国人教程最多的，国外口碑也非常好，看到外国的一句评论说，缺点就是大多数内容都是中文，英文教程少，哈哈。Hexo是基于Node.js，对于程序员相当友好。不过这次我决定选择另一个Framework，使用Hugo。Hugo是用现在大热的go语言写的，据说编译起来比Hexo还会快很多。而且我最近在学go…\n开始  开始吧  那就开始吧\n","description":"","tags":["hugo"],"title":"Hugo 建站（1）","uri":"/posts/hugo/hugo_install_1/"},{"categories":null,"content":"​\tHugo：是一种通用的网站框架。严格来说，这类应用应该被称作静态网站生成器。这类应用将 Markdown 文件和主题一起编译成由 HTML、CSS、JavaScript 组成的静态网页。\n​\t然后上传到 GitHub 上，通过 GitHub 提供的静态页面托管服务 (GitHub Pages) 进行访问。\n​\t这里就写一篇文章来记录一下踩过的坑。\n","description":"","tags":["hugo"],"title":"使用Hugo + GitHub Pages搭建个人博客","uri":"/posts/hugo/hugo_install/"},{"categories":null,"content":"​\t理工男，非强迫症，不可一日无书\n","description":"","tags":null,"title":"关于我","uri":"/about/%E5%85%B3%E4%BA%8E%E6%88%91/"}]
