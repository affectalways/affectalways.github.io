<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title type="text">affectalways</title>
    <subtitle type="html">affectalways.</subtitle>
    <updated>2020-06-23T22:19:24&#43;08:00</updated>
    <id>https://affectalways.github.io/</id>
    <link rel="alternate" type="text/html" href="https://affectalways.github.io/" />
    <link rel="self" type="application/atom&#43;xml" href="https://affectalways.github.io/atom.xml" />
    <author>
            <name>affectalways</name>
            <uri>https://affectalways.github.io/</uri>
            
                <email>affectalways@gmail.com</email>
            </author>
    <rights>@2020 affectalways</rights>
    <generator uri="https://gohugo.io/" version="0.72.0">Hugo</generator>
        <entry>
            <title type="text">单例模式</title>
            <link rel="alternate" type="text/html" href="https://affectalways.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/" />
            <id>https://affectalways.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
            <updated>2020-06-22T22:29:56&#43;08:00</updated>
            <published>2020-06-22T22:28:03&#43;08:00</published>
            <author>
                    <name>affectalways</name>
                    <uri>https://affectalways.github.io/</uri>
                    <email>affectalways@gmail.com</email>
                    </author>
            <rights>@2020 affectalways</rights><summary type="html"></summary>
            
                <content type="html"></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" term="设计模式" label="设计模式" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/python/" term="python" label="python" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" term="设计模式" label="设计模式" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">(1)两数之和相加 leetcode</title>
            <link rel="alternate" type="text/html" href="https://affectalways.github.io/posts/leetcode/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%E7%9B%B8%E5%8A%A0/" />
            <id>https://affectalways.github.io/posts/leetcode/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%E7%9B%B8%E5%8A%A0/</id>
            <updated>2020-06-22T22:09:17&#43;08:00</updated>
            <published>2020-06-22T21:51:44&#43;08:00</published>
            <author>
                    <name>affectalways</name>
                    <uri>https://affectalways.github.io/</uri>
                    <email>affectalways@gmail.com</email>
                    </author>
            <rights>@2020 affectalways</rights><summary type="html">leetcode，两数之和相加</summary>
            
                <content type="html">&lt;p&gt;给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。&lt;/p&gt;
&lt;p&gt;你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;示例:

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;解法一&#34;&gt;解法一&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;class Solution(object):
    def twoSum(self, nums, target):
        &amp;quot;&amp;quot;&amp;quot;
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        &amp;quot;&amp;quot;&amp;quot;
        if not len(nums):
            return []
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if nums[i] + nums[j] == target:
                    return [i,j]
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;解法二&#34;&gt;解法二&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;利用Python创建字典（即hash），同时有效避免了key相同的情况
class Solution:
    def twoSum(self, nums, target):
        dic = {}
        for i in range(len(nums)):
            if str(target - nums[i]) in dic:
                return [dic[str(target - nums[i])], i]
            dic[str(nums[i])] = i


&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/leetcode/" term="leetcode" label="leetcode" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/leetcode/" term="leetcode" label="leetcode" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Gunicorn 源码解析(1)</title>
            <link rel="alternate" type="text/html" href="https://affectalways.github.io/posts/gunicorn/gunicorn_source_code_1/" />
            <id>https://affectalways.github.io/posts/gunicorn/gunicorn_source_code_1/</id>
            <updated>2020-06-20T22:51:04&#43;08:00</updated>
            <published>2020-06-20T11:29:06&#43;08:00</published>
            <author>
                    <name>affectalways</name>
                    <uri>https://affectalways.github.io/</uri>
                    <email>affectalways@gmail.com</email>
                    </author>
            <rights>@2020 affectalways</rights><summary type="html"></summary>
            
                <content type="html"></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/python/" term="python" label="python" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/gunicorn/" term="gunicorn" label="gunicorn" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/python/" term="python" label="python" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/server/" term="server" label="server" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/gunicorn/" term="gunicorn" label="gunicorn" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Celery 源码解析（1）</title>
            <link rel="alternate" type="text/html" href="https://affectalways.github.io/posts/celery/celery_source_code_1/" />
            <id>https://affectalways.github.io/posts/celery/celery_source_code_1/</id>
            <updated>2020-06-20T22:51:04&#43;08:00</updated>
            <published>2020-06-20T11:24:01&#43;08:00</published>
            <author>
                    <name>affectalways</name>
                    <uri>https://affectalways.github.io/</uri>
                    <email>affectalways@gmail.com</email>
                    </author>
            <rights>@2020 affectalways</rights><summary type="html"></summary>
            
                <content type="html"></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/celery/" term="celery" label="celery" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/python/" term="python" label="python" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Flask 源码解析（1）</title>
            <link rel="alternate" type="text/html" href="https://affectalways.github.io/posts/flask/flask_source_code_1/" />
            <id>https://affectalways.github.io/posts/flask/flask_source_code_1/</id>
            <updated>2020-06-20T22:51:04&#43;08:00</updated>
            <published>2020-06-20T11:24:01&#43;08:00</published>
            <author>
                    <name>affectalways</name>
                    <uri>https://affectalways.github.io/</uri>
                    <email>affectalways@gmail.com</email>
                    </author>
            <rights>@2020 affectalways</rights><summary type="html"></summary>
            
                <content type="html"></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/python/" term="python" label="python" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/flask/" term="flask" label="flask" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/flask/" term="flask" label="flask" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/python/" term="python" label="python" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Flask 源码解析（2）</title>
            <link rel="alternate" type="text/html" href="https://affectalways.github.io/posts/flask/flask_source_code_2/" />
            <id>https://affectalways.github.io/posts/flask/flask_source_code_2/</id>
            <updated>2020-06-20T22:51:04&#43;08:00</updated>
            <published>2020-06-20T11:24:01&#43;08:00</published>
            <author>
                    <name>affectalways</name>
                    <uri>https://affectalways.github.io/</uri>
                    <email>affectalways@gmail.com</email>
                    </author>
            <rights>@2020 affectalways</rights><summary type="html"></summary>
            
                <content type="html"></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/python/" term="python" label="python" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/flask/" term="flask" label="flask" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/flask/" term="flask" label="flask" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/python/" term="python" label="python" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Flask 源码解析（3）</title>
            <link rel="alternate" type="text/html" href="https://affectalways.github.io/posts/flask/flask_source_code_3/" />
            <id>https://affectalways.github.io/posts/flask/flask_source_code_3/</id>
            <updated>2020-06-20T22:51:04&#43;08:00</updated>
            <published>2020-06-20T11:24:01&#43;08:00</published>
            <author>
                    <name>affectalways</name>
                    <uri>https://affectalways.github.io/</uri>
                    <email>affectalways@gmail.com</email>
                    </author>
            <rights>@2020 affectalways</rights><summary type="html"></summary>
            
                <content type="html"></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/python/" term="python" label="python" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/flask/" term="flask" label="flask" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/flask/" term="flask" label="flask" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/python/" term="python" label="python" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Flask 源码解析（4）</title>
            <link rel="alternate" type="text/html" href="https://affectalways.github.io/posts/flask/flask_source_code_4/" />
            <id>https://affectalways.github.io/posts/flask/flask_source_code_4/</id>
            <updated>2020-06-20T22:51:04&#43;08:00</updated>
            <published>2020-06-20T11:24:01&#43;08:00</published>
            <author>
                    <name>affectalways</name>
                    <uri>https://affectalways.github.io/</uri>
                    <email>affectalways@gmail.com</email>
                    </author>
            <rights>@2020 affectalways</rights><summary type="html"></summary>
            
                <content type="html"></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/python/" term="python" label="python" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/flask/" term="flask" label="flask" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/flask/" term="flask" label="flask" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/python/" term="python" label="python" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Flask 源码解析（5）</title>
            <link rel="alternate" type="text/html" href="https://affectalways.github.io/posts/flask/flask_source_code_5/" />
            <id>https://affectalways.github.io/posts/flask/flask_source_code_5/</id>
            <updated>2020-06-20T22:51:04&#43;08:00</updated>
            <published>2020-06-20T11:24:01&#43;08:00</published>
            <author>
                    <name>affectalways</name>
                    <uri>https://affectalways.github.io/</uri>
                    <email>affectalways@gmail.com</email>
                    </author>
            <rights>@2020 affectalways</rights><summary type="html"></summary>
            
                <content type="html"></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/python/" term="python" label="python" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/flask/" term="flask" label="flask" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/flask/" term="flask" label="flask" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/python/" term="python" label="python" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Flask 源码解析（6）</title>
            <link rel="alternate" type="text/html" href="https://affectalways.github.io/posts/flask/flask_source_code_6/" />
            <id>https://affectalways.github.io/posts/flask/flask_source_code_6/</id>
            <updated>2020-06-20T22:51:04&#43;08:00</updated>
            <published>2020-06-20T11:24:01&#43;08:00</published>
            <author>
                    <name>affectalways</name>
                    <uri>https://affectalways.github.io/</uri>
                    <email>affectalways@gmail.com</email>
                    </author>
            <rights>@2020 affectalways</rights><summary type="html"></summary>
            
                <content type="html"></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/python/" term="python" label="python" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/flask/" term="flask" label="flask" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/flask/" term="flask" label="flask" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/python/" term="python" label="python" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">requests 源码解析（1）</title>
            <link rel="alternate" type="text/html" href="https://affectalways.github.io/posts/requests/requests_source_code_1/" />
            <id>https://affectalways.github.io/posts/requests/requests_source_code_1/</id>
            <updated>2020-06-20T22:51:04&#43;08:00</updated>
            <published>2020-06-20T11:24:01&#43;08:00</published>
            <author>
                    <name>affectalways</name>
                    <uri>https://affectalways.github.io/</uri>
                    <email>affectalways@gmail.com</email>
                    </author>
            <rights>@2020 affectalways</rights><summary type="html"></summary>
            
                <content type="html"></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/python/" term="python" label="python" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/requests/" term="requests" label="requests" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/requests/" term="requests" label="requests" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/python/" term="python" label="python" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">WSGI 理解（1）</title>
            <link rel="alternate" type="text/html" href="https://affectalways.github.io/posts/wsgi/wsgi_kl_1/" />
            <id>https://affectalways.github.io/posts/wsgi/wsgi_kl_1/</id>
            <updated>2020-06-21T23:29:41&#43;08:00</updated>
            <published>2020-06-20T11:24:01&#43;08:00</published>
            <author>
                    <name>affectalways</name>
                    <uri>https://affectalways.github.io/</uri>
                    <email>affectalways@gmail.com</email>
                    </author>
            <rights>@2020 affectalways</rights><summary type="html">WSGI 是个什么东西？ 实际的生产环境中，Python应用程序是放在服务器的http server（比如Apache、Nginx等）上的。现在的问题是http server（之后以服务器代称）怎么把接收到的请求传递给Python应用程序？这就是WSGI做的事情。
WSGI（Web Server Gateway Interface）即Web服务器网关接口，解耦了服务器（Apache、Nginx等）和Python应用程序，是Python开发者只需要关注Python应用程序的开发。
 Web Server：即HTTP Server，接收用户的请求并返回响应信息；分为以下两部分：
 服务器，如Apache、Nginx等 Python应用程序，负责处理业务逻辑   HTTP Server 实现 服务器每接收到一个请求就调用一次Python Application。服务器作用如下
 接收HTTP请求 提供environ和回调函数start_response，并传给callable object 调用callable object  以下是PEP-3333提供的示例
import os, sys enc, esc = sys.getfilesystemencoding(), &#39;surrogateescape&#39; def unicode_to_wsgi(u): # Convert an environment variable to a WSGI &amp;quot;bytes-as-unicode&amp;quot; string return u.</summary>
            
                <content type="html">&lt;h2 id=&#34;wsgi-是个什么东西&#34;&gt;WSGI 是个什么东西？&lt;/h2&gt;
&lt;p&gt;实际的生产环境中，Python应用程序是放在服务器的http server（比如Apache、Nginx等）上的。现在的问题是http server（之后以服务器代称）怎么把接收到的请求传递给Python应用程序？这就是WSGI做的事情。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WSGI（Web Server Gateway Interface）&lt;/code&gt;即Web服务器网关接口，解耦了&lt;code&gt;服务器（Apache、Nginx等）&lt;/code&gt;和&lt;code&gt;Python应用程序&lt;/code&gt;，是Python开发者只需要关注Python应用程序的开发。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Web Server：即HTTP Server，接收用户的请求并返回响应信息；分为以下两部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务器，如Apache、Nginx等&lt;/li&gt;
&lt;li&gt;Python应用程序，负责处理业务逻辑&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/wsgi/wsgi_1/wsgi_1_framework.png?raw=true&#34; alt=&#34;wsgi_framework.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/wsgi/wsgi_1/wsgi_1_wsgi.png?raw=true&#34; alt=&#34;wsgi.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;http-server-实现&#34;&gt;HTTP Server 实现&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;服务器&lt;/code&gt;每接收到一个请求就调用一次&lt;code&gt;Python Application&lt;/code&gt;。&lt;code&gt;服务器&lt;/code&gt;作用如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收HTTP请求&lt;/li&gt;
&lt;li&gt;提供&lt;code&gt;environ&lt;/code&gt;和回调函数&lt;code&gt;start_response&lt;/code&gt;，并传给&lt;code&gt;callable object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;callable object&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是&lt;a href=&#34;https://www.python.org/dev/peps/pep-3333/#the-application-framework-side&#34;&gt;PEP-3333&lt;/a&gt;提供的示例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import os, sys

enc, esc = sys.getfilesystemencoding(), &#39;surrogateescape&#39;

def unicode_to_wsgi(u):
    # Convert an environment variable to a WSGI &amp;quot;bytes-as-unicode&amp;quot; string
    return u.encode(enc, esc).decode(&#39;iso-8859-1&#39;)

def wsgi_to_bytes(s):
    return s.encode(&#39;iso-8859-1&#39;)


def run_with_cgi(application):
	&amp;quot;&amp;quot;&amp;quot;
		application: 是Python Application中的callable object
	&amp;quot;&amp;quot;&amp;quot;
    # 构造environ变量，dict类型，里面的内容是一次HTTP请求的环境变量
    environ = {k: unicode_to_wsgi(v) for k,v in os.environ.items()}
    environ[&#39;wsgi.input&#39;]        = sys.stdin.buffer
    environ[&#39;wsgi.errors&#39;]       = sys.stderr
    environ[&#39;wsgi.version&#39;]      = (1, 0)
    environ[&#39;wsgi.multithread&#39;]  = False
    environ[&#39;wsgi.multiprocess&#39;] = True
    environ[&#39;wsgi.run_once&#39;]     = True

    if environ.get(&#39;HTTPS&#39;, &#39;off&#39;) in (&#39;on&#39;, &#39;1&#39;):
        environ[&#39;wsgi.url_scheme&#39;] = &#39;https&#39;
    else:
        environ[&#39;wsgi.url_scheme&#39;] = &#39;http&#39;

    headers_set = []
    headers_sent = []

    # 把响应信息写到终端
    def write(data):
        out = sys.stdout.buffer

        if not headers_set:
             raise AssertionError(&amp;quot;write() before start_response()&amp;quot;)

        elif not headers_sent:
             # Before the first output, send the stored headers
             status, response_headers = headers_sent[:] = headers_set
             out.write(wsgi_to_bytes(&#39;Status: %s\r\n&#39; % status))
             for header in response_headers:
                 out.write(wsgi_to_bytes(&#39;%s: %s\r\n&#39; % header))
             out.write(wsgi_to_bytes(&#39;\r\n&#39;))

        out.write(data)
        out.flush()

    # 定义start_response回调函数
    def start_response(status, response_headers, exc_info=None):
        if exc_info:
            try:
                if headers_sent:
                    # Re-raise original exception if headers sent
                    raise exc_info[1].with_traceback(exc_info[2])
            finally:
                exc_info = None     # avoid dangling circular ref
        elif headers_set:
            raise AssertionError(&amp;quot;Headers already set!&amp;quot;)

        headers_set[:] = [status, response_headers]

        # Note: error checking on the headers should happen here,
        # *after* the headers are set.  That way, if an error
        # occurs, start_response can only be re-called with
        # exc_info set.

        return write

    result = application(environ, start_response)
    try:
        # 处理application返回的结果（可迭代）
        for data in result:
            if data:    # don&#39;t send headers until body appears
                write(data)
        if not headers_sent:
            write(&#39;&#39;)   # send headers now if body was empty
    finally:
        if hasattr(result, &#39;close&#39;):
            result.close()
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;中间件middleware&#34;&gt;中间件Middleware&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Middlerware&lt;/code&gt;是位于&lt;code&gt;Http Server&lt;/code&gt;和&lt;code&gt;Python Application&lt;/code&gt;之间的功能组件。&lt;/p&gt;
&lt;p&gt;对于&lt;code&gt;Http Server&lt;/code&gt;而言，&lt;code&gt;Middlerware&lt;/code&gt;就是应用程序；对于&lt;code&gt;Python Application&lt;/code&gt;而言，&lt;code&gt;Middlerware&lt;/code&gt;就是&lt;code&gt;Http Server&lt;/code&gt;。&lt;code&gt;Middleware&lt;/code&gt;对&lt;code&gt;Http Server&lt;/code&gt;和&lt;code&gt;Python Application&lt;/code&gt;是透明的，把从&lt;code&gt;Http Server&lt;/code&gt;接收到的请求进行处理并向后传递，一直传递给&lt;code&gt;Python Application&lt;/code&gt;，最后把&lt;code&gt;Python Application&lt;/code&gt;的处理结果返回给&lt;code&gt;Http Server&lt;/code&gt;。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/wsgi/wsgi_1/wsgiframeworkmiddleware.png?raw=true&#34; alt=&#34;wsgi_middlerware.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Middlerware&lt;/code&gt;组件可执行以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据 url 把用户请求调度到不同的 Python Application 中。&lt;/li&gt;
&lt;li&gt;负载均衡，转发用户请求&lt;/li&gt;
&lt;li&gt;预处理 XSL 等相关数据&lt;/li&gt;
&lt;li&gt;限制请求速率，设置白名单&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：WSGI 的 middleware 体现了 unix 的哲学之一：do one thing and do it well。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本例实现了一个关于异常处理的 middleware（&lt;a href=&#34;https://lucumr.pocoo.org/2007/5/21/getting-started-with-wsgi/&#34;&gt;摘自&lt;/a&gt;）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from sys import exc_info
from traceback import format_tb

class ExceptionMiddleware(object):
    &amp;quot;&amp;quot;&amp;quot;The middleware we use.&amp;quot;&amp;quot;&amp;quot;

    def __init__(self, app):
        self.app = app

    def __call__(self, environ, start_response):
        &amp;quot;&amp;quot;&amp;quot;Call the application can catch exceptions.&amp;quot;&amp;quot;&amp;quot;
        appiter = None
        # just call the application and send the output back
        # unchanged but catch exceptions
        try:
            appiter = self.app(environ, start_response)
            for item in appiter:
                yield item
        # if an exception occours we get the exception information
        # and prepare a traceback we can render
        except:
            e_type, e_value, tb = exc_info()
            traceback = [&#39;Traceback (most recent call last):&#39;]
            traceback += format_tb(tb)
            traceback.append(&#39;%s: %s&#39; % (e_type.__name__, e_value))
            # we might have not a stated response by now. try
            # to start one with the status code 500 or ignore an
            # raised exception if the application already started one.
            try:
                start_response(&#39;500 INTERNAL SERVER ERROR&#39;, [
                               (&#39;Content-Type&#39;, &#39;text/plain&#39;)])
            except:
                pass
            yield &#39;\n&#39;.join(traceback)

        # wsgi applications might have a close function. If it exists
        # it *must* be called.
        if hasattr(appiter, &#39;close&#39;):
            appiter.close()
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;python-application&#34;&gt;Python Application&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Python Application&lt;/code&gt;端必须定义一个 &lt;code&gt;callable object&lt;/code&gt;，&lt;code&gt;callable object&lt;/code&gt; 可以是以下三者之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;function/method&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;instance with a __call__ method&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;callable object&lt;/code&gt;必须满足以下两个条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收两个参数：environ（字典，WSGI的环境信息）、start_response（响应请求的函数, 返回HTTP status、headers给server）&lt;/li&gt;
&lt;li&gt;返回一个可迭代的值（iterable）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;重点内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;environ&lt;/code&gt;和&lt;code&gt;start_response&lt;/code&gt;由&lt;code&gt;http server&lt;/code&gt;提供并实现&lt;/li&gt;
&lt;li&gt;&lt;code&gt;environ&lt;/code&gt;变量是包含环境变量的字典&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Python Application&lt;/code&gt;内部在返回前调用&lt;code&gt;start_response&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start_response&lt;/code&gt;也是一个callable，接收两个必要的参数，&lt;code&gt;status&lt;/code&gt;和&lt;code&gt;response_headers&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;callable-object代码实现&#34;&gt;callable object代码实现&lt;/h4&gt;
&lt;h5 id=&#34;1functionmethod&#34;&gt;1.function/method&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;def application(environ, start_response):
	# 调用服务器程序提供的 start_response，填入两个参数
	start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text/json&#39;)])
	return []
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;2class&#34;&gt;2.class&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;class ApplicationClass(object):
	def __init__(self, environ, start_response):
		self.environ = environ
		self.start_response = start_response
	
	def __iter__(self):
		self.start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text/json&#39;)])
		yield &amp;quot;随便&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;使用方式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for result in ApplicationClass(environ, start_response):
    do_somthing(result)
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h5 id=&#34;3instance-with-a-__call__-method&#34;&gt;3.instance with a &lt;strong&gt;call&lt;/strong&gt; method&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;class ApplicationClass(object):
	def __init__(self):
		pass
		
	def __call__(self, environ, start_response):
		start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text/json&#39;)])
		yield &amp;quot;anything&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;使用方式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;app = ApplicationClass()
for result in app(environ, start_response):
	do_something(result)
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;参考链接&#34;&gt;参考链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.python.org/dev/peps/pep-3333/#the-application-framework-side&#34;&gt;PEP-3333&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://lucumr.pocoo.org/2007/5/21/getting-started-with-wsgi/&#34;&gt;巨佬&lt;/a&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/python/" term="python" label="python" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/wsgi/" term="WSGI" label="WSGI" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/flask/" term="flask" label="flask" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/python/" term="python" label="python" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/wsgi/" term="wsgi" label="wsgi" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Hugo 添加评论功能</title>
            <link rel="alternate" type="text/html" href="https://affectalways.github.io/posts/hugo/hugo_comment/" />
            <id>https://affectalways.github.io/posts/hugo/hugo_comment/</id>
            <updated>2020-06-20T22:51:04&#43;08:00</updated>
            <published>2020-06-17T21:48:44&#43;08:00</published>
            <author>
                    <name>affectalways</name>
                    <uri>https://affectalways.github.io/</uri>
                    <email>affectalways@gmail.com</email>
                    </author>
            <rights>@2020 affectalways</rights><summary type="html">Hugo 添加评论功能</summary>
            
                <content type="html">&lt;h1 id=&#34;不能评论&#34;&gt;不能评论!&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; 是一个强大的静态网页生成器，使用 go 开发，速度贼快。不过 Hugo 还比较年轻，没有像 &lt;a href=&#34;https://theme-next.iissnan.com/&#34;&gt;NexT&lt;/a&gt; 那样功能强大，成熟稳定的主题。所以很多东西需要自己动手撸。&lt;/p&gt;
&lt;p&gt;比如评论系统。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;评论系统排名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;valine &amp;gt; gitalk &amp;gt; gitment &amp;gt; livere &amp;gt; 畅言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;关于valine&#34;&gt;关于Valine&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/hugo/hugo_comment/valine.png?raw=true&#34; alt=&#34;valine.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;官方网址： &amp;laquo;&lt;a href=&#34;https://valine.js.org/%3E%3E&#34;&gt;https://valine.js.org/&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其特性不一一赘述，官方网址有介绍&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;添加评论区&#34;&gt;添加评论区&lt;/h2&gt;
&lt;p&gt;目前博客使用的主题是meme&lt;/p&gt;
&lt;p&gt;不同的主题可能有所区别，但原理大都类似&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&#34;原理&#34;&gt;原理？&lt;/h3&gt;
&lt;p&gt;Hugo 会将 &lt;strong&gt;Markdown 文档&lt;/strong&gt; 按照 &lt;strong&gt;主题 (包括 HTML 模板、CSS、JavaScript 等)&lt;/strong&gt; 编译成静态网页&lt;/p&gt;
&lt;p&gt;那么我们只需要将 &lt;code&gt;Valine&lt;/code&gt;作为一个 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 插入到 HTML 模板中，然后在 &lt;code&gt;config.toml&lt;/code&gt; 中添加相关配置，就可以添加&lt;code&gt;评论区&lt;/code&gt;了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;leancloud相关配置&#34;&gt;Leancloud相关配置&lt;/h2&gt;
&lt;p&gt;评论系统依赖于&lt;code&gt;leancloud&lt;/code&gt;，所以需要先在&lt;code&gt;leancloud&lt;/code&gt;中进行相关的准备工作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://leancloud.cn/dashboard/login.html#/signin&#34;&gt;登录&lt;/a&gt; 或 &lt;a href=&#34;https://leancloud.cn/dashboard/login.html#/signup&#34;&gt;注册&lt;/a&gt; LeanCloud&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登录成功后，进入后台点击左上角的创建应用：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/hugo/hugo_comment/leancloud.png?raw=true&#34; alt=&#34;leancloud.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建好应用，进入应用，左边栏找到 &lt;strong&gt;设置&lt;/strong&gt; ，然后点击 &lt;strong&gt;应用Key&lt;/strong&gt;，此时记录出现的 &lt;strong&gt;App ID&lt;/strong&gt; 和 &lt;strong&gt;App Key&lt;/strong&gt;，后面配置文件中会用到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/hugo/hugo_comment/leancloud_key.png?raw=true&#34; alt=&#34;lc_key.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为评论和文章阅读数统计依赖于存储，所以还需要建立两个新的存储 &lt;code&gt;Class&lt;/code&gt;，左边栏找到并点击 &lt;strong&gt;存储&lt;/strong&gt;，点击 &lt;strong&gt;创建Class&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/hugo/hugo_comment/leancloud_class.png?raw=true&#34; alt=&#34;lc_class.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建两个存储Class，分别命名为: &lt;code&gt;Counter&lt;/code&gt; 和 &lt;code&gt;Comment&lt;/code&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;还需要为应用添加安全域名，左边栏点击 &lt;strong&gt;设置&lt;/strong&gt;，找到 &lt;strong&gt;安全中心&lt;/strong&gt;，点击后会看到 &lt;strong&gt;安全域名&lt;/strong&gt; 设置框，输入博客使用的域名，点击保存即可：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/hugo/hugo_comment/leancloud_safe.png?raw=true&#34; alt=&#34;lc_safe.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;configtoml开启comment&#34;&gt;config.toml开启comment&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;将&lt;code&gt;enableComments = false&lt;/code&gt;设置为&lt;code&gt;enableComments = true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;enableValine = false&lt;/code&gt;设置为&lt;code&gt;enableValine = true&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;添加 &lt;strong&gt;Valine&lt;/strong&gt; 参数项：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;## Valine
    enableValine = true
    valineAppId = &amp;quot;************&amp;quot;
    valineAppKey = &amp;quot;*****************&amp;quot;
    valinePlaceholder = &amp;quot;Just go go&amp;quot;
    valinePath = &amp;quot;&amp;quot;
    valineAvatar = &amp;quot;mm&amp;quot;
    valineMeta = [&amp;quot;nick&amp;quot;, &amp;quot;mail&amp;quot;, &amp;quot;link&amp;quot;]
    valinePageSize = 10
    valineLang = &amp;quot;zh-cn&amp;quot;
    valineVisitor = false
    valineHighlight = true
    valineAvatarForce = false
    valineRecordIP = false
    valineServerURLs = &amp;quot;&amp;quot;
    valineEmojiCDN = &amp;quot;&amp;quot;
    valineEmojiMaps = {}
    valineEnableQQ = false
    valineRequiredFields = []
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面几项内容的含义，这里简单一说，具体还是要看 &lt;a href=&#34;https://valine.js.org/configuration.html&#34;&gt;Valine官网中配置相关的内容&lt;/a&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;enable&lt;/td&gt;
&lt;td&gt;这是用于主题中配置的，不是官方Valine的参数，&lt;strong&gt;true&lt;/strong&gt;时控制开启此评论系统&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;appId&lt;/td&gt;
&lt;td&gt;这是在 &lt;a href=&#34;https://leancloud.cn/&#34;&gt;leancloud&lt;/a&gt; 后台应用中获取的，也就是上面提到的 &lt;strong&gt;App ID&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;appKey&lt;/td&gt;
&lt;td&gt;这是在 &lt;a href=&#34;https://leancloud.cn/&#34;&gt;leancloud&lt;/a&gt; 后台应用中获取的，也就是上面提到的 &lt;strong&gt;App Key&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;notify&lt;/td&gt;
&lt;td&gt;用于控制是否开启邮件通知功能，具体参考&lt;a href=&#34;https://github.com/xCss/Valine/wiki/Valine-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E9%82%AE%E4%BB%B6%E6%8F%90%E9%86%92%E8%AE%BE%E7%BD%AE&#34;&gt;邮件提醒配置&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;verify&lt;/td&gt;
&lt;td&gt;用于控制是否开启评论验证码功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;avatar&lt;/td&gt;
&lt;td&gt;用于配置评论项中用户头像样式，有多种选择：mm, identicon, monsterid, wavatar, retro, hide。详细参考：&lt;a href=&#34;https://valine.js.org/avatar.html&#34;&gt;头像配置&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;placehoder&lt;/td&gt;
&lt;td&gt;评论框的提示符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;visitor&lt;/td&gt;
&lt;td&gt;控制是否开启文章阅读数的统计功能i, 详情阅读&lt;a href=&#34;https://valine.js.org/visitor.html&#34;&gt;文章阅读数统计&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;修改主题文件&#34;&gt;修改主题文件&lt;/h3&gt;
&lt;p&gt;主要是修改主题中评论相关的布局文件 &lt;code&gt;themes\meme\layouts\partials\components\comments.html&lt;/code&gt;，按照 &lt;a href=&#34;https://valine.js.org/quickstart.html&#34;&gt;Valine快速开始&lt;/a&gt; 添加 &lt;strong&gt;Valine&lt;/strong&gt; 相关代码，找到以下位置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ if .Site.Params.enableValine }}
{{- end }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;添加的 &lt;strong&gt;Valine&lt;/strong&gt; 评论的代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ if .Site.Params.enableValine }}
            &amp;lt;div id=&amp;quot;vcomments&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
			&amp;lt;script src=&amp;quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
			  &amp;lt;script src=&#39;//unpkg.com/valine/dist/Valine.min.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
			  &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
				new Valine({
					el: &#39;#vcomments&#39; ,
					appId: &#39;{{ .Site.Params.valineAppId }}&#39;,
					appKey: &#39;{{ .Site.Params.valineAppKey }}&#39;,
					notify: &#39;{{ .Site.Params.valineNotify }}&#39;, 
					verify: &#39;{{ .Site.Params.valineVerify }}&#39;, 
					avatar:&#39;{{ .Site.Params.valineAvatar }}&#39;, 
					placeholder: &#39;{{ .Site.Params.valinePlaceholder }}&#39;,
					visitor: &#39;{{ .Site.Params.valineVisitor }}&#39;
				});
			  &amp;lt;/script&amp;gt;
        {{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到上述代码中引用了配置文件中的相关参数，这样以后修改配置就不用修改代码了，只需要改配置文件 &lt;code&gt;config.toml&lt;/code&gt;。&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/blog/" term="blog" label="blog" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/hugo/" term="hugo" label="hugo" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/hugo/" term="hugo" label="hugo" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Hugo 让 GitHub Pages被索引到</title>
            <link rel="alternate" type="text/html" href="https://affectalways.github.io/posts/hugo/hugo_seo/" />
            <id>https://affectalways.github.io/posts/hugo/hugo_seo/</id>
            <updated>2020-06-20T22:51:04&#43;08:00</updated>
            <published>2020-06-17T21:00:29&#43;08:00</published>
            <author>
                    <name>affectalways</name>
                    <uri>https://affectalways.github.io/</uri>
                    <email>affectalways@gmail.com</email>
                    </author>
            <rights>@2020 affectalways</rights><summary type="html">Hugo 让 GitHub Pages被索引到</summary>
            
                <content type="html">&lt;h2 id=&#34;居然都找不到&#34;&gt;居然都找不到！&lt;/h2&gt;
&lt;p&gt;其实Blog我主要是用来做一些记录，突然看到有博客提到GitHub Pages屏蔽了百度的爬虫，所以百度是搜索不到GitHub Pages上的网页的。&lt;/p&gt;
&lt;p&gt;什么？所以百度搜索搜不到我的个人博客？不死心，尝试一下，找得到github、gist主页，但是就是找不到github.io后缀的网页。除了百度之外，我还尝试了Bing、Google，都没有。&lt;/p&gt;
&lt;h2 id=&#34;如何让搜索引擎索引到呢&#34;&gt;如何让搜索引擎索引到呢？&lt;/h2&gt;
&lt;p&gt;发现流行的搜索引擎居然都找不到博客，那就需要赶紧找解决方法。Google和Bing还不清楚是怎么回事，但网上流传的email回复内容都点明了Github Pages禁止了百度爬虫的爬去，似乎原因是百度爬虫爬得太过于频繁，会严重影响服务器性能。针对百度爬虫的问题，大家找了很多方法。自建服务器托管博客、将博客放在Gitlab上或者CDN方法都不在我的选择范围内，因为暂时我还没有购买服务器或者域名的打算，所以决定放弃百度……但不管怎么样Bing和Google还是要设置好的！&lt;/p&gt;
&lt;h3 id=&#34;google&#34;&gt;Google&lt;/h3&gt;
&lt;h4 id=&#34;添加资源&#34;&gt;添加资源&lt;/h4&gt;
&lt;p&gt;在google搜索页面输入“site:affectalways.github.io”就可以看到这个网页是否被google索引到，如果没被索引到，在搜索结果页面就会直接提示你使用&lt;a href=&#34;https://search.google.com/search-console?utm_source=about-page&amp;amp;resource_id=https://affectalways.github.io/&#34;&gt;Google Search Console&lt;/a&gt;。登录后，如果是首次使用在Search Console中以下界面中选择“网页”类型资源，并将博客完整url填入其中，我填入“https://affectalways.github.io”。注意http或者https，www等最好能完全正确。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/hugo/hugo_seo/hugo_seo_1.png?raw=true&#34; alt=&#34;hugo_seo_1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果已经添加过资源，则需要点击左上角的按钮，然后和上面一样地添加资源即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/hugo/hugo_seo/hugo_seo_2.png?raw=true&#34; alt=&#34;hugo_seo_2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;资源添加后，需要验证你对该网站有所有权。Google提供了几种方法，我选择了三种方式：&lt;/p&gt;
&lt;h5 id=&#34;html验证文件上传&#34;&gt;HTML验证文件上传&lt;/h5&gt;
&lt;p&gt;只需要根据要求，下载HTML验证文件，把文件放在站点根目录的static目录下（以本网站为例：affectalways/static）&lt;/p&gt;
&lt;h5 id=&#34;html标记&#34;&gt;HTML标记&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;config.toml&lt;/code&gt;中的&lt;code&gt;googleSiteVerification = &amp;quot;&amp;quot;&lt;/code&gt; 设置为 &lt;code&gt;googleSiteVerification = 不为空&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;找到&lt;code&gt;themes/meme/layouts/partials/head.html&lt;/code&gt;中的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{- with .Site.Params.googleSiteVerification }}

        &amp;lt;meta name=&amp;quot;google-site-verification&amp;quot; content=&amp;quot;&amp;quot; /&amp;gt;

{{- end }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;把&lt;code&gt;content&lt;/code&gt;内容改为给定的内容，然后执行&lt;code&gt;hugo&lt;/code&gt;命令，就可以验证了&lt;/p&gt;
&lt;h5 id=&#34;google-analytics&#34;&gt;Google Analytics&lt;/h5&gt;
&lt;p&gt;先到&lt;a href=&#34;https://marketingplatform.google.com/about/analytics/&#34;&gt;Google Analytics&lt;/a&gt;创建一个账号，并登录。&lt;/p&gt;
&lt;p&gt;新建一个资源，填完后获得&lt;code&gt;tracking code&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;更新&lt;code&gt;config.toml&lt;/code&gt;文件，把&lt;code&gt;enableGoogleAnalytics&lt;/code&gt;设为&lt;code&gt;true&lt;/code&gt;，&lt;code&gt;trackingCodeType&lt;/code&gt;设为&lt;code&gt;gtag&lt;/code&gt;（两个选择gtag和analytics，因为affectalways.github.io使用的是&lt;code&gt;Google Analytics给定的gtag.js&lt;/code&gt;，所以设置为gtag），&lt;code&gt;trackingID&lt;/code&gt;设为获取到的&lt;code&gt;tracking code&lt;/code&gt;。然后执行&lt;code&gt;hugo&lt;/code&gt;命令，就可以验证了。&lt;/p&gt;
&lt;h4 id=&#34;站点地图&#34;&gt;站点地图&lt;/h4&gt;
&lt;p&gt;在左侧点击“站点地图”，并在右侧点添加/测试站点地图，并添加url，我的是&lt;code&gt;https://affectalways.github.io/sitemap.xml&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;bing&#34;&gt;Bing&lt;/h3&gt;
&lt;p&gt;相似地，在&lt;a href=&#34;https://www.bing.com/webmaster/home&#34;&gt;Bing网站管理&lt;/a&gt;登陆、添加网站url。&lt;/p&gt;
&lt;p&gt;然后在左侧点击“配置我的网站&amp;gt;Sitemaps”，并在右侧加上sitemap的url，点击提交。&lt;/p&gt;
&lt;h3 id=&#34;百度不死心的尝试&#34;&gt;百度不死心的尝试&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;不死心的失败了&lt;/p&gt;
&lt;/blockquote&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/blog/" term="blog" label="blog" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/hugo/" term="hugo" label="hugo" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/hugo/" term="hugo" label="hugo" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Hugo 添加tags等分类</title>
            <link rel="alternate" type="text/html" href="https://affectalways.github.io/posts/hugo/hugo_tags/" />
            <id>https://affectalways.github.io/posts/hugo/hugo_tags/</id>
            <updated>2020-06-20T22:51:04&#43;08:00</updated>
            <published>2020-06-17T20:19:37&#43;08:00</published>
            <author>
                    <name>affectalways</name>
                    <uri>https://affectalways.github.io/</uri>
                    <email>affectalways@gmail.com</email>
                    </author>
            <rights>@2020 affectalways</rights><summary type="html">Hugo 添加tags等分类</summary>
            
                <content type="html">&lt;h1 id=&#34;hugo&#34;&gt;Hugo&lt;/h1&gt;
&lt;p&gt;Hugo是支持用户自定义分类的，这个称为taxonomy，可以来对网页内容进行逻辑划分，详情可以在&lt;a href=&#34;https://gohugo.io/content-management/taxonomies/&#34;&gt;这里&lt;/a&gt;查看。&lt;/p&gt;
&lt;p&gt;分类taxonomy有3个概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Taxonomy 分类&lt;/strong&gt;: 可以用来对内容进行分类的类别&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Term 术语&lt;/strong&gt;: 分类的一个键&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Value 值&lt;/strong&gt;: 分配给这个Term的具体内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如我需要增加3个分类，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tag：文章标签&lt;/li&gt;
&lt;li&gt;topic：文章主题/文章系列&lt;/li&gt;
&lt;li&gt;category：文章分类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以tag为例，则对应Taxonomy是tag，Term是具体标签内容比如hugo，Value是打上这个标签的对应网页。&lt;/p&gt;
&lt;h3 id=&#34;配置分类&#34;&gt;配置分类&lt;/h3&gt;
&lt;p&gt;需要在 &lt;code&gt;config.toml&lt;/code&gt; 中增加分类。还是这个例子，则需要增加如下内容：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[taxonomies]
tag = &amp;quot;tags&amp;quot;
category = &amp;quot;categories&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而将每个post的头部也相应增加对应的分类，例如这篇的头部就相应为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;title: &amp;quot;Hugo添加tags等分类&amp;quot;
date: 2020-06-17T20:19:37+08:00
tags: [&amp;quot;hugo&amp;quot;]
draft: true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然实际上，Hugo默认会产生 &lt;code&gt;tags&lt;/code&gt; 和 &lt;code&gt;categories&lt;/code&gt; 的分类，如果只需要这两个，可以不用在 &lt;code&gt;config.toml&lt;/code&gt; 中声明就在post头部使用。&lt;/p&gt;
&lt;h3 id=&#34;分类集合查看&#34;&gt;分类集合查看&lt;/h3&gt;
&lt;p&gt;使用分类taxonomy之后，Hugo会使用分类的模板 (taxonomy templates) 来自动生成一个显示所有分类的term术语的网页以及一个显示该术语的所有value内容列表网页。&lt;/p&gt;
&lt;p&gt;还是以tag为例：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;example.com/tags/&lt;/code&gt; 会列出tags中的所有术语；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;example.com/tags/docker&lt;/code&gt; 会列出tags标为docker的所有网页列表。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;额外知识点：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;keywordsdescription&#34;&gt;keywords、description&lt;/h3&gt;
&lt;p&gt;meta标签的一个很重要的功能就是设置关键字，来帮助你的主页被各大搜索引擎登录，提高网站的访问量。在这个功能中，最重要的就是对Keywords和description的设置。因为按照搜索引擎的工作原理,搜索引擎首先派出机器人自动检索页面中的keywords和decription，并将其加入到自己的数据库，然后再根据关键词的密度将网站排序。因此，我们必须设置好关键字，来提高页面的搜索点击率。使用如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;keywords: 
- hugo
- blog
- 博客
- 建站
description: &amp;quot;Hugo 添加tags等分类&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;keywords需要进行配置：&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;themes\meme\layouts\partials\header.html&lt;/code&gt;的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;header class=&amp;quot;header&amp;quot;{{ if and (eq .Site.Params.headerLayout &amp;quot;flex&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;内部添加&lt;/p&gt;
&lt;meta content=&#34;{{ delimit .Keywords &#34;, &#34; }}&#34; name=&#34;keywords&#34;&gt;
就可以了
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;description是hugo支持的，不需要配置&lt;/p&gt;
&lt;/blockquote&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/blog/" term="blog" label="blog" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/hugo/" term="hugo" label="hugo" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/hugo/" term="hugo" label="hugo" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Hugo blog（2）</title>
            <link rel="alternate" type="text/html" href="https://affectalways.github.io/posts/hugo/hugo_install_2/" />
            <id>https://affectalways.github.io/posts/hugo/hugo_install_2/</id>
            <updated>2020-06-20T22:51:04&#43;08:00</updated>
            <published>2020-06-16T23:30:53&#43;08:00</published>
            <author>
                    <name>affectalways</name>
                    <uri>https://affectalways.github.io/</uri>
                    <email>affectalways@gmail.com</email>
                    </author>
            <rights>@2020 affectalways</rights><summary type="html">Hugo 建站（2）Blog</summary>
            
                <content type="html">&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;正如上一篇说的，我选择了&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;作为静态网页生成器。为何要放弃Hexo，换成Hugo呢？&lt;/p&gt;
&lt;p&gt;主要是出于以下考虑：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.Hugo是一个用go写的静态网页生成器，它被提及最多的优点就是它生成网站的速度快。&lt;/p&gt;
&lt;p&gt;2.同样得益于go，Hugo的安装配置看上去也并不麻烦；Hugo可以很轻松的被编译成二进制文件安装、运行。不必像Hexo一样依赖Node.js，也不必安装一堆依赖&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Hugo的安装配置看上去也并不麻烦，同样得益于go，&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;安装&#34;&gt;安装&lt;/h1&gt;
&lt;p&gt;直接在&lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;这里&lt;/a&gt;选择合适的版本。&lt;/p&gt;
&lt;p&gt;下载好后解压，将解压出来的可执行文件 (格式为 .exe)，放到自己喜欢的目录下。直接可以使用，不需要安装。&lt;/p&gt;
&lt;p&gt;但要记住一定要将你选择的文件夹路径加入到环境变量 &lt;code&gt;PATH&lt;/code&gt; 中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：由于theme选择的是meme，需要下载extended版本的hugo；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;初始化&#34;&gt;初始化&lt;/h1&gt;
&lt;p&gt;下面，初始化博客路径。首先需要选择一个路径来存放我们的博客，在你选好的路径下执行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo new site myBlog
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这条命令会创建一个名为&lt;strong&gt;myBlog&lt;/strong&gt;（可以使用任意名字）的文件夹来存放你的博客。执行 &lt;strong&gt;cd myBlog&lt;/strong&gt; 命令进入文件夹。&lt;/p&gt;
&lt;p&gt;此时目录结构应该是这样的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
└── myBlog
    ├── config.toml / config.yaml / config.json
    ├── content
    │   └── ...
    ├── layouts
    │   └── ...
    ├── themes
    │   └── ...
    ├── static
    │   └── ...
    ├── archetypes
    │   └── ...
    ├── data
    │   └── ...
    └── ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;config.toml&lt;/code&gt; 是网站的配置文件，Hugo还可使用 &lt;code&gt;config.yaml&lt;/code&gt; 或者 &lt;code&gt;config.json&lt;/code&gt; 进行配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;content&lt;/code&gt; 文件夹中存放所有的网站内容，可在此文件夹中建立其他子文件夹，即为子模块。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;layouts&lt;/code&gt; 文件夹存放 &lt;code&gt;.html&lt;/code&gt; 格式的模板。模板确定了静态网站渲染的样式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;themes&lt;/code&gt; 文件夹存放网站使用的theme主题模板。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt; 文件夹存放未来网站使用的静态内容，比如图片、css、JavaScript等。当Hugo生成静态网站时，该文件夹中的所有内容会原封不动的被复制。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;archetypes&lt;/code&gt; 文件夹存放网站预设置的文件模板头部，当使用 &lt;code&gt;hugo new&lt;/code&gt; 时即可生成一个带有该头部的实例。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt; 文件夹用来存储Hugo生成网站时应用的配置文件。配置文件可以是YAML，JSON或者TOML格式。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;配置theme&#34;&gt;配置theme&lt;/h1&gt;
&lt;p&gt;可以在&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;这里&lt;/a&gt;找自己喜欢的主题。我暂时选择有搜索功能的meme，将主题clone到&lt;code&gt;themes&lt;/code&gt;目录下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/忘了/meme.git themes/meme
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后将&lt;code&gt;themes/meme/exampleSite/config.toml&lt;/code&gt;模板配置文件复制到根目录，然后根据此文件来配置你的设置。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：一定要把config.yaml中的theme修改为你使用的主体名称。比如我用的主题是meme，config.yaml文件就设置theme=&amp;quot;meme&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;创建新页面&#34;&gt;创建新页面&lt;/h1&gt;
&lt;p&gt;创建一个新页面&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo new about.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时 &lt;code&gt;content&lt;/code&gt; 文件夹下就多了一个 &lt;code&gt;about.md&lt;/code&gt; 文件，打开文件就可以看到时间、文件名等信息已经自动生成了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;about&amp;quot;
date: 2020-06-16T23:30:53+08:00
draft: true
---
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;两条 &lt;code&gt;---&lt;/code&gt; 间的信息是文章的配置信息，有的信息是自动生成的 (如：&lt;code&gt;title&lt;/code&gt;、&lt;code&gt;date&lt;/code&gt; 等)，简单介绍以下各项配置&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;以下项目是自动生成的:&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;title:&lt;/code&gt; # 文章标题&lt;/li&gt;
&lt;li&gt;&lt;code&gt;date:&lt;/code&gt; # 写作时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;draft:&lt;/code&gt; # 是否为草稿，如果为 &lt;code&gt;true&lt;/code&gt; 需要在命令中加入 &lt;code&gt;--buildDrafts&lt;/code&gt; 参数才会生成这个文档&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;以下项目需要自行添加:&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;description:&lt;/code&gt; # 描述&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tags:&lt;/code&gt; # 标签，用于文章分类&lt;/li&gt;
&lt;li&gt;等等&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;自动生成&lt;/code&gt; 和 &lt;code&gt;执行添加&lt;/code&gt; 的内容并不是绝对的，你可以根据自己的喜好配置模板文件 &lt;code&gt;archetypes/default.md&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;生成网站&#34;&gt;生成网站&lt;/h1&gt;
&lt;p&gt;设置完&lt;code&gt;config.toml&lt;/code&gt; 后我们执行以下命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo server --buildDrafts -w
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时你就可以在 &lt;code&gt;http://localhost:1313&lt;/code&gt; 访问到你的博客了。&lt;/p&gt;
&lt;p&gt;此时你的博客目录下就会多出一个&lt;code&gt;public&lt;/code&gt;目录，这是Hugo生成的网站。&lt;/p&gt;
&lt;p&gt;简单介绍一下两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--buildDrafts&lt;/code&gt;: 生成被标记为 「草稿」 的文档&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-w&lt;/code&gt;: 监控更改，如果发生更改直接显示到博客上&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：但此时只能在本地访问 (相当于预览博客，如果与期望值不符，可以随时更改)，如果想发布到 &lt;code&gt;Github Pages&lt;/code&gt; 上需要先将文章配置信息中的 &lt;code&gt;draft:&lt;/code&gt; 改为 &lt;code&gt;false&lt;/code&gt; ，&lt;/p&gt;
&lt;p&gt;然后执行命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;h1 id=&#34;github-pages部署&#34;&gt;GitHub Pages部署&lt;/h1&gt;
&lt;p&gt;参考&lt;a href=&#34;https://help.github.com/articles/user-organization-and-project-pages/&#34;&gt;这里&lt;/a&gt;，在Github Pages有四种类型，而对于非组织型用户来说有两种，一种是用户的个人网站，网页域名为 &lt;code&gt;username.github.io&lt;/code&gt;，另一种为Project的主页，网页域名为 &lt;code&gt;username.github.io/projectname&lt;/code&gt;。Github Pages对于Project主页的源码要求有了修改，现在也可以放置在master上，之前版本中必须放在&lt;code&gt;gh-pages&lt;/code&gt; 分支上，不过这里暂且不提，主要还是关心用户个人主页。&lt;/p&gt;
&lt;p&gt;这就需要你在Github上建立一个以 &lt;code&gt;username.github.io&lt;/code&gt; 为名称的repository，对于我来说就是 &lt;code&gt;affectalways.github.io&lt;/code&gt;。此外，需要将Hugo生成的所有静态网页push到这个repository的master分支上。现在就可以用这个域名打开个人网站了。&lt;/p&gt;
&lt;p&gt;Hugo没有提供自动发布到GitHub Pages的功能。需要将&lt;code&gt;public&lt;/code&gt;中的内容手动上传到Github上。&lt;/p&gt;
&lt;p&gt;首先执行命令&lt;code&gt;cd public&lt;/code&gt;进入到&lt;code&gt;public&lt;/code&gt;目录，然后执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init
git remote add origin https://github.com/[Github 用户名]/[Github 用户名].github.io.git
git add .
git commit -m &amp;quot;[介绍，随便写点什么，比如日期]&amp;quot;
git push （若是第一次发布，需要用到--set-upstream）
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/blog/" term="blog" label="blog" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/hugo/" term="hugo" label="hugo" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/hugo/" term="hugo" label="hugo" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Hugo blog（1）</title>
            <link rel="alternate" type="text/html" href="https://affectalways.github.io/posts/hugo/hugo_install_1/" />
            <id>https://affectalways.github.io/posts/hugo/hugo_install_1/</id>
            <updated>2020-06-20T22:51:04&#43;08:00</updated>
            <published>2020-06-16T22:55:34&#43;08:00</published>
            <author>
                    <name>affectalways</name>
                    <uri>https://affectalways.github.io/</uri>
                    <email>affectalways@gmail.com</email>
                    </author>
            <rights>@2020 affectalways</rights><summary type="html">Hugo 建站（1）Blog</summary>
            
                <content type="html">&lt;h1 id=&#34;初始&#34;&gt;初始&lt;/h1&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;养个blog的想法从很早就有了但是&#34;&gt;养个Blog的想法从很早就有了，但是…&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;从本科开始就一直想要一个自己的Blog，一直没有行动。本身我就没有记日志的习惯，也没有需求和冲动写下什么东西，虽然有时想记下学的内容，但有道云笔记就够了，也没什么写技术博客的想法。除了很久之前偶尔在CSDN写了几篇入门级文章，也就没有其他了。此外，虽说博客最重要的是内容，但没有一个好的生态环境和前端界面设计，至少对于我而言，没有任何兴趣花时间在上面，原谅我是外观主义者。对于界面设计，CSDN或者博客园实在不敢恭维，尤其是CSDN。自建网站之前也尝试过，恩，还要使用服务器，花钱。我得承认，当时作为本科生的我，太过局限于学校课堂，并未走出去看看，对于网络信息的运用和挖掘也更多停留在看看答案、找找软件、翻翻视频的基础使用上，最多也就是查看下算法之类的。&lt;/p&gt;
&lt;p&gt;最近，特别是正式工作快一年了，更多地接触了“网络世界”的信息和知识，拓宽了实页。随着自我学习机会和时间愈少，碎片化学习和感想也愈多，加上虽然网上知识丰富，但内容驳杂，过段时间想再查找却需要对这些信息重新筛选、略感费劲，再加上工作后个人体悟良多，于是又一次萌生个人博客的想法。&lt;/p&gt;
&lt;h1 id=&#34;难产&#34;&gt;难产&lt;/h1&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;选择恐惧症控制狂的特质决定了我家blog的难产&#34;&gt;选择恐惧症+控制狂的特质决定了我家Blog的难产&amp;hellip;&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;尽管现在有许多像知乎专栏这样现代化的界面和良好的用户群的网站可以让人直接在上面写作，但我还是更倾向于GitHub Pages，与GitHub非常紧密的关系是该倾向性很重要的原因（这对码农而言，非常有诱惑力）。&lt;/p&gt;
&lt;p&gt;GitHub Pages搭建个人博客，使用的是轻量级的静态网页，网上已经有了很多教程和方案。几天前遇到了三种方案：Jekyll、Hexo、Hugo。Jekyll据说可定制化和功能很强大，但是ruby个人真的很不能接受。Hexo是国人教程最多的，国外口碑也非常好，看到外国的一句评论说，缺点就是大多数内容都是中文，英文教程少，哈哈。Hexo是基于Node.js，对于程序员相当友好。不过这次我决定选择另一个Framework，使用Hugo。Hugo是用现在大热的go语言写的，据说编译起来比Hexo还会快很多。而且我最近在学go&amp;hellip;&lt;/p&gt;
&lt;h1 id=&#34;开始&#34;&gt;开始&lt;/h1&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;开始吧&#34;&gt;开始吧&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;那就开始吧&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/blog/" term="blog" label="blog" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/hugo/" term="hugo" label="hugo" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/hugo/" term="hugo" label="hugo" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">使用Hugo &#43; GitHub Pages搭建个人博客</title>
            <link rel="alternate" type="text/html" href="https://affectalways.github.io/posts/hugo/hugo_install/" />
            <id>https://affectalways.github.io/posts/hugo/hugo_install/</id>
            <updated>2020-06-20T22:51:04&#43;08:00</updated>
            <published>2020-06-16T22:40:14&#43;08:00</published>
            <author>
                    <name>affectalways</name>
                    <uri>https://affectalways.github.io/</uri>
                    <email>affectalways@gmail.com</email>
                    </author>
            <rights>@2020 affectalways</rights><summary type="html">使用Hugo + GitHub Pages搭建个人博客</summary>
            
                <content type="html">&lt;p&gt;&lt;img src=&#34;https://github.com/affectalways/affectalways.github.io/blob/master/images/hugo/hugo_install/hugo.png?raw=true&#34; alt=&#34;hugo.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	Hugo：是一种通用的网站框架。严格来说，这类应用应该被称作静态网站生成器。这类应用将 Markdown 文件和主题一起编译成由 HTML、CSS、JavaScript 组成的静态网页。&lt;/p&gt;
&lt;p&gt;​	然后上传到 GitHub 上，通过 GitHub 提供的静态页面托管服务 (GitHub Pages) 进行访问。&lt;/p&gt;
&lt;p&gt;​	这里就写一篇文章来记录一下踩过的坑。&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/blog/" term="blog" label="blog" />
                            
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/categories/hugo/" term="hugo" label="hugo" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://affectalways.github.io/tags/hugo/" term="hugo" label="hugo" />
                            
                        
                    
                
            
        </entry>
    
</feed>
